<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris的博客</title>
  
  <subtitle>前端路漫漫</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chrischen0405.github.io/"/>
  <updated>2022-09-22T08:17:49.567Z</updated>
  <id>http://chrischen0405.github.io/</id>
  
  <author>
    <name>陈文杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uniapp image标签base64不显示图片的问题</title>
    <link href="http://chrischen0405.github.io/2021/03/26/post20210326/"/>
    <id>http://chrischen0405.github.io/2021/03/26/post20210326/</id>
    <published>2021-03-26T08:29:04.000Z</published>
    <updated>2022-09-22T08:17:49.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>如题，在uniapp中使用<code>image</code>标签，<code>imgUrl</code>是后端返回的一段<code>base64</code>格式的图片：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">'imgUrl'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样可能会出现图片无法显示的问题，但是标签的<code>src</code>里是有值的，打开调试看到图片的透明度变成了0：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">uni-image</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">position</span>: absolute; </span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>这是因为<code>base64</code>字符串太长，在传输过程中加入回车导致</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>把<code>base64</code>中的换行符替换掉就好了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">'imgUrl.replace(/[\r\n]/g, ")'</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;如题，在uniapp中使用&lt;code&gt;image&lt;/code&gt;标签，&lt;code&gt;imgUrl&lt;/code&gt;是后端返回的一段&lt;code&gt;base64&lt;/code&gt;格式的图片：&lt;/p&gt;
    
    </summary>
    
      <category term="uni-app" scheme="http://chrischen0405.github.io/categories/uni-app/"/>
    
    
      <category term="uni-app" scheme="http://chrischen0405.github.io/tags/uni-app/"/>
    
      <category term="image" scheme="http://chrischen0405.github.io/tags/image/"/>
    
      <category term="base64" scheme="http://chrischen0405.github.io/tags/base64/"/>
    
      <category term="bug" scheme="http://chrischen0405.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>yarn之后报node-sass错误</title>
    <link href="http://chrischen0405.github.io/2020/02/17/post20200217/"/>
    <id>http://chrischen0405.github.io/2020/02/17/post20200217/</id>
    <published>2020-02-17T09:14:14.000Z</published>
    <updated>2022-09-22T07:47:58.249Z</updated>
    
    <content type="html"><![CDATA[<p>今天项目<code>yarn</code>以后报了以下错误：<br><a id="more"></a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">error D:\workproject\wxapp-liuliangphone\node_modules\node-sass: Command failed.</span><br><span class="line">Exit code: 1</span><br><span class="line">Command: node scripts/build.js</span><br><span class="line">Arguments:</span><br><span class="line">Directory: D:\workproject\wxapp-liuliangphone\node_modules\node-sass</span><br><span class="line">Output:</span><br><span class="line">Building: D:\nodejs\node.exe D:\workproject\wxapp-liuliangphone\node_modules\node-gyp\bin\node-gyp.js rebuild --verbose --libsass_ext= --libsa</span><br><span class="line">ss_cflags= --libsass_ldflags= --libsass_library=</span><br><span class="line">gyp info it worked if it ends with ok</span><br><span class="line">gyp verb cli [ 'D:\\nodejs\\node.exe',</span><br><span class="line">gyp verb cli   'D:\\workproject\\wxapp-liuliangphone\\node_modules\\node-gyp\\bin\\node-gyp.js',</span><br><span class="line">gyp verb cli   'rebuild',</span><br><span class="line">gyp verb cli   '--verbose',</span><br><span class="line">gyp verb cli   '--libsass_ext=',</span><br><span class="line">gyp verb cli   '--libsass_cflags=',</span><br><span class="line">gyp verb cli   '--libsass_ldflags=',</span><br><span class="line">gyp verb cli   '--libsass_library=' ]</span><br><span class="line">gyp info using node-gyp@3.8.0</span><br><span class="line">gyp info using node@8.6.0 | win32 | x64</span><br><span class="line">gyp verb command rebuild []</span><br><span class="line">gyp verb command clean []</span><br><span class="line">gyp verb clean removing "build" directory</span><br><span class="line">gyp verb command configure []</span><br><span class="line">gyp verb download using dist-url https://npm.taobao.org/dist</span><br><span class="line">gyp verb check python checking for Python executable "python2" in the PATH</span><br><span class="line">gyp verb `which` failed Error: not found: python2</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:89:16</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\index.js:42:5</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\windows.js:36:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:153:21)</span><br><span class="line">gyp verb `which` failed  python2 &#123; Error: not found: python2</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:89:16</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\index.js:42:5</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\windows.js:36:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:153:21)</span><br><span class="line">gyp verb `which` failed   stack: 'Error: not found: python2\n    at getNotFoundError (D:\\workproject\\wxapp-liuliangphone\\node_modules\\whic</span><br><span class="line">h\\which.js:13:12)\n    at F (D:\\workproject\\wxapp-liuliangphone\\node_modules\\which\\which.js:68:19)\n    at E (D:\\workproject\\wxapp-liu</span><br><span class="line">liangphone\\node_modules\\which\\which.js:80:29)\n    at D:\\workproject\\wxapp-liuliangphone\\node_modules\\which\\which.js:89:16\n    at D:\</span><br><span class="line">\workproject\\wxapp-liuliangphone\\node_modules\\isexe\\index.js:42:5\n    at D:\\workproject\\wxapp-liuliangphone\\node_modules\\isexe\\windo</span><br><span class="line">ws.js:36:5\n    at FSReqWrap.oncomplete (fs.js:153:21)',</span><br><span class="line">gyp verb `which` failed   code: 'ENOENT' &#125;</span><br><span class="line">gyp verb check python checking for Python executable "python" in the PATH</span><br><span class="line">gyp verb `which` failed Error: not found: python</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:89:16</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\index.js:42:5</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\windows.js:36:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:153:21)</span><br><span class="line">gyp verb `which` failed  python &#123; Error: not found: python</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\which\which.js:89:16</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\index.js:42:5</span><br><span class="line">gyp verb `which` failed     at D:\workproject\wxapp-liuliangphone\node_modules\isexe\windows.js:36:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:153:21)</span><br><span class="line">gyp verb `which` failed   stack: 'Error: not found: python\n    at getNotFoundError (D:\\workproject\\wxapp-liuliangphone\\node_modules\\which</span><br><span class="line">\\which.js:13:12)\n    at F (D:\\workproject\\wxapp-liuliangphone\\node_modules\\which\\which.js:68:19)\n    at E (D:\\workproject\\wxapp-liul</span><br><span class="line">iangphone\\node_modules\\which\\which.js:80:29)\n    at D:\\workproject\\wxapp-liuliangphone\\node_modules\\which\\which.js:89:16\n    at D:\\</span><br><span class="line">workproject\\wxapp-liuliangphone\\node_modules\\isexe\\index.js:42:5\n    at D:\\workproject\\wxapp-liuliangphone\\node_modules\\isexe\\window</span><br><span class="line">s.js:36:5\n    at FSReqWrap.oncomplete (fs.js:153:21)',</span><br><span class="line">gyp verb `which` failed   code: 'ENOENT' &#125;</span><br><span class="line">gyp verb could not find "python". checking python launcher</span><br><span class="line">gyp verb could not find "python". guessing location</span><br><span class="line">gyp verb ensuring that file exists: C:\Python27\python.exe</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Can't find Python executable "python", you can set the PYTHON env variable.</span><br><span class="line">gyp ERR! stack     at PythonFinder.failNoPython (D:\workproject\wxapp-liuliangphone\node_modules\node-gyp\lib\configure.js:484:19)</span><br><span class="line">gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (D:\workproject\wxapp-liuliangphone\node_modules\node-gyp\lib\configure.js:509:16)</span><br><span class="line">gyp ERR! stack     at callback (D:\workproject\wxapp-liuliangphone\node_modules\graceful-fs\polyfills.js:295:20)</span><br><span class="line">gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:153:21)</span><br><span class="line">gyp ERR! System Windows_NT 6.3.9600</span><br><span class="line">gyp ERR! command "D:\\nodejs\\node.exe" "D:\\workproject\\wxapp-liuliangphone\\node_modules\\node-gyp\\bin\\node-gyp.js" "rebuild" "--verbose"</span><br><span class="line"> "--libsass_ext=" "--libsass_cflags=" "--libsass_ldflags=" "--libsass_library="</span><br><span class="line">gyp ERR! cwd D:\workproject\wxapp-liuliangphone\node_modules\node-sass</span><br><span class="line">gyp ERR! node -v v8.6.0</span><br><span class="line">gyp ERR! node-gyp -v v3.8.0</span><br><span class="line">gyp ERR! not ok</span><br></pre></td></tr></table></figure></p><p>网上找了一圈解决办法，大多是重装<code>node-sass</code>，大家可以试一下，但是我并没有用，依旧是<code>ERR!</code>，因为产生的原因是因为windows缺少编译的运行环境所以无法安装<code>node-sass</code>导致的错误，只需要：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add node-gyp  windows-build-tools</span><br></pre></td></tr></table></figure></p><p>安装完<code>windows-build-tools</code>以后重新<code>yarn</code>就可以了，亲测有效</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天项目&lt;code&gt;yarn&lt;/code&gt;以后报了以下错误：&lt;br&gt;
    
    </summary>
    
      <category term="踩坑" scheme="http://chrischen0405.github.io/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
      <category term="报错" scheme="http://chrischen0405.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
      <category term="yarn" scheme="http://chrischen0405.github.io/tags/yarn/"/>
    
      <category term="npm" scheme="http://chrischen0405.github.io/tags/npm/"/>
    
      <category term="node" scheme="http://chrischen0405.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>mpvue动画</title>
    <link href="http://chrischen0405.github.io/2020/01/08/post20200217-3/"/>
    <id>http://chrischen0405.github.io/2020/01/08/post20200217-3/</id>
    <published>2020-01-08T09:48:47.000Z</published>
    <updated>2022-09-22T07:47:58.248Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下用mpvue开发微信小程序遇到的问题<br>背景是小程序上需要写一个简单的循环动画，试了几种方法，留下了一堆坑，之后如果有空或者又遇到这个问题了再填吧（跑）<br><a id="more"></a></p><h2 id="1-wx-createAnimation"><a href="#1-wx-createAnimation" class="headerlink" title="1.wx.createAnimation"></a>1.wx.createAnimation</h2><p>先调用<code>createAnimation</code> API创建一个动画实例animation。调用实例的方法来描述动画。最后通过动画实例的<code>export</code>方法导出动画数据传递给组件的 animation 属性。<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/wx.createAnimation.html" target="_blank" rel="noopener">官方文档</a>的例子如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">animation</span>=<span class="string">"&#123;&#123;animationData&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"background:red;height:100rpx;width:100rpx"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">      animationData: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animation = wx.createAnimation(&#123;</span><br><span class="line">        duration: <span class="number">1000</span>,</span><br><span class="line">        timingFunction: <span class="string">'ease'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.animation = animation</span><br><span class="line"></span><br><span class="line">      animation.scale(<span class="number">2</span>,<span class="number">2</span>).rotate(<span class="number">45</span>).step()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        animationData:animation.export()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        animation.translate(<span class="number">30</span>).step()</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">          animationData:animation.export()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>mpvue和小程序原生的写法稍微有点不同：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:animation</span>=<span class="string">"animationData"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">      animationData: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  onShow () &#123;</span><br><span class="line">    <span class="keyword">let</span> animation = mpvue.createAnimation(&#123;</span><br><span class="line">        duration: <span class="number">1000</span>,</span><br><span class="line">        timingFunction: <span class="string">'ease'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    animation.scale(<span class="number">2</span>,<span class="number">2</span>).rotate(<span class="number">45</span>).step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.animationData = animation.export()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>大体上都是相同的，不一样的地方在于mpvue没有<code>this.animation</code>，因为原生的小程序this指的是最外面的Page，而mpvue中this指的是外层vue对象，两者虽然看起来一样，但是指向不同，编译以后会报错（暂时没有解决mpvue中不能使用微信小程序的this.animation的问题，这个坑，之后有空再填orz），但是可以直接把创建的动画实例<code>animation</code>赋值给已经绑定在动画节点上的<code>this.animationData</code>，就可以该元素的动画效果了，我暂时没有搞明白为什么原生小程序还需要给<code>this.animation</code>赋值一个动画实例，明明可以直接给绑定在动画节点上的变量赋值实现动画效果（留个坑）</p><h2 id="2-关键帧动画"><a href="#2-关键帧动画" class="headerlink" title="2.关键帧动画"></a>2.关键帧动画</h2><p>从小程序基础库2.9.0开始支持一种更友好的动画创建方式，用于代替旧的<code>wx.createAnimation</code>。它具有更好的性能和更可控的接口。在页面或自定义组件中，当需要进行关键帧动画时，可以使用 <code>this.animate</code> 接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.animate(selector, keyframes, duration, callback)</span><br></pre></td></tr></table></figure></p><p>参数列表如下：</p><ul><li>selector  选择器</li><li>keyframes  关键帧信息</li><li>duration  动画持续时长（毫秒为单位）</li><li>callback  动画完成后的回调函数<br>之前已经说了，在mpvue里面的<code>this</code>和原生小程序中的<code>this</code>不同，所以就不能直接使用<code>this.animate</code>接口（暂时不知道怎么在mpvue中直接使用<code>this.animate</code>接口，留个坑）<br>举个在原生小程序里使用的例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">      animationData: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animate(<span class="string">'#container'</span>, [</span><br><span class="line">      &#123; <span class="attr">opacity</span>: <span class="number">1.0</span>, <span class="attr">rotate</span>: <span class="number">0</span>, <span class="attr">backgroundColor</span>: <span class="string">'#FF0000'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">opacity</span>: <span class="number">0.5</span>, <span class="attr">rotate</span>: <span class="number">45</span>, <span class="attr">backgroundColor</span>: <span class="string">'#00FF00'</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">opacity</span>: <span class="number">0.0</span>, <span class="attr">rotate</span>: <span class="number">90</span>, <span class="attr">backgroundColor</span>: <span class="string">'#FF0000'</span> &#125;,</span><br><span class="line">      ], <span class="number">5000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clearAnimation(<span class="string">'#container'</span>, &#123; <span class="attr">opacity</span>: <span class="literal">true</span>, <span class="attr">rotate</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"清除了#container上的opacity和rotate属性"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>调用<code>animate</code> API 后会在节点上新增一些样式属性覆盖掉原有的对应样式。如果需要清除这些样式，可在该节点上的动画全部执行完毕后，在回调函数中使用<code>this.clearAnimation</code>清除这些属性。</p><h2 id="3-css3动画"><a href="#3-css3动画" class="headerlink" title="3.css3动画"></a>3.css3动画</h2><p>看了一圈发现原生小程序的动画对mpvue不是很友好，而且只能执行一次，要想循环还需要写定时器，所以还可以直接选择用css3动画来写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: animation <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> animation &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>OK，一下子就搞定了</p><p>看了看文档，写完以后还是对小程序动画一知半解，留下了不少坑没有解决，希望之后会把这些坑补上orz。如果上面有什么写的不对的地方或者想法可以指正</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下用mpvue开发微信小程序遇到的问题&lt;br&gt;背景是小程序上需要写一个简单的循环动画，试了几种方法，留下了一堆坑，之后如果有空或者又遇到这个问题了再填吧（跑）&lt;br&gt;
    
    </summary>
    
      <category term="个人整理" scheme="http://chrischen0405.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/"/>
    
    
      <category term="mpvue" scheme="http://chrischen0405.github.io/tags/mpvue/"/>
    
      <category term="动画" scheme="http://chrischen0405.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="微信小程序" scheme="http://chrischen0405.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="animation" scheme="http://chrischen0405.github.io/tags/animation/"/>
    
      <category term="小程序" scheme="http://chrischen0405.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>flutter真机调试一直loading</title>
    <link href="http://chrischen0405.github.io/2019/12/13/post20200217-2/"/>
    <id>http://chrischen0405.github.io/2019/12/13/post20200217-2/</id>
    <published>2019-12-13T09:21:45.000Z</published>
    <updated>2022-09-22T07:47:58.248Z</updated>
    
    <content type="html"><![CDATA[<p>问题如图，在flutter开发的时候红框中一直loading：<br><img src="/img/post20200217-2/1.png" alt="问题"><br><a id="more"></a><br>真机调试的时候红框里一直loading，把as关了重开，电脑重启都不行，解决办法如下：<br><img src="/img/post20200217-2/2.png" alt="路径"><br>在安装flutter的路径底下进入bin/cache，然后把下图的lockfile删除，然后重新跑一遍就好了<br><img src="/img/post20200217-2/3.png" alt="删除"><br>问题解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题如图，在flutter开发的时候红框中一直loading：&lt;br&gt;&lt;img src=&quot;/img/post20200217-2/1.png&quot; alt=&quot;问题&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="踩坑" scheme="http://chrischen0405.github.io/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
      <category term="flutter" scheme="http://chrischen0405.github.io/tags/flutter/"/>
    
      <category term="报错" scheme="http://chrischen0405.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>git基本命令以及使用场景介绍</title>
    <link href="http://chrischen0405.github.io/2019/11/01/post20191101/"/>
    <id>http://chrischen0405.github.io/2019/11/01/post20191101/</id>
    <published>2019-11-01T14:23:26.000Z</published>
    <updated>2022-09-22T07:47:58.247Z</updated>
    
    <content type="html"><![CDATA[<p>使用了一阵子<code>git</code>，记录一下收获以及遇到的问题或者是解决办法，如果文章中有什么错误，或者有什么疑问可以指出交流 ：）</p><h3 id="git基本流程"><a href="#git基本流程" class="headerlink" title="git基本流程"></a>git基本流程</h3><p>可能以下流程不是标准的<code>git flow</code>，但是日常开发中用的最多的也是这几个命令，有错之处还望指正<br><a id="more"></a></p><h4 id="第一步-从远端克隆仓库"><a href="#第一步-从远端克隆仓库" class="headerlink" title="第一步 从远端克隆仓库"></a>第一步 从远端克隆仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h4 id="第二步-从master开一个新的分支"><a href="#第二步-从master开一个新的分支" class="headerlink" title="第二步 从master开一个新的分支"></a>第二步 从<code>master</code>开一个新的分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p>如果只是切换已经有的分支就不用加<code>-b</code>了，比如，远端有一个<code>dev</code>分支，本地在从<code>master</code>分支切换到<code>dev</code>分支的时候就不需要加<code>-b</code>参数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure></p><h4 id="第三步-提交修改的代码"><a href="#第三步-提交修改的代码" class="headerlink" title="第三步 提交修改的代码"></a>第三步 提交修改的代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;git message&quot;</span><br></pre></td></tr></table></figure><p>这里的参数<code>-m</code>是可以填写提交信息，后面的<code>git message</code>就是填写的提交信息，至于提交信息的填写规范可以自行查看。<br>参数<code>-a</code>是用来把已经被<code>git</code>追踪的修改或删除的文件提交，如果只是修改或者删除文件的话可以不使用<code>git add</code>，但如果有新增的文件，在提交前需要把文件添加到 <code>git</code>系统中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></p><p><code>.</code>表示所有的文件，也可以指定具体的文件名，但是我一直都是<code>git add .</code>，图方便嘻嘻</p><h4 id="第四步-把分支合并"><a href="#第四步-把分支合并" class="headerlink" title="第四步 把分支合并"></a>第四步 把分支合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master //切换到master分支</span><br><span class="line">git pull --rebase origin master //拉取远端master代码</span><br><span class="line">git merge &lt;分支名称&gt; //合并分支</span><br></pre></td></tr></table></figure><p>在提交完自己分支修改的代码之后，首先切换到需要合代码的分支，比如<code>master</code>分支，然后拉取远端代码，因为在协同工作的时候，可能别人已经把修改之后的代码推到远端，所以需要先把<code>master</code>更新到最新，然后再把自己的分支合并即可。<br>拉代码的时候不加<code>--rebase</code>也没有关系，只不过加了<code>--rebase</code>以后<code>git</code>的提交树会比较清爽，感兴趣的可以搜<strong>变基合并</strong></p><h4 id="第五步-把修改提交到远端"><a href="#第五步-把修改提交到远端" class="headerlink" title="第五步 把修改提交到远端"></a>第五步 把修改提交到远端</h4><p>上一步已经把修改合并到了<code>master</code>分支上，然后把本地的<code>master</code>分支推到远端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><h4 id="第六步-删除自己的分支"><a href="#第六步-删除自己的分支" class="headerlink" title="第六步 删除自己的分支"></a>第六步 删除自己的分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p>在功能分支合并了以后，就可以把功能分支删除了。<br>如果功能分支没有合并的话，<code>-d</code>是无法删除该分支的，但如果非要删，可以用<code>-D</code>参数强制删除该分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure></p><p>不加参数的话就是查看本地所有分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></p><p>如果本地的分支已经删除，还想删除远端的分支的话，可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;分支名称&gt;</span><br></pre></td></tr></table></figure></p><p>因为本地分支已经删除了，所以要在分支名称前加上<code>:</code>，不然<code>push</code>的时候会报错说分支不存在</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h4><p>在日常开发中，可能在写一个需求的时候，让你改一个紧急的bug，而且是在同一个项目里，这时候就要使用<code>git</code>的储存了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash //把修改的内容储存起来</span><br><span class="line">git stash list //查看储存的堆栈</span><br><span class="line">git stash pop //把最近的储存取出到工作区并且删除堆栈中的这次储存</span><br><span class="line">git stash apply //应用最近的储存</span><br><span class="line">git stash drop //删除最近的储存</span><br><span class="line">git stash clear //清空储存堆栈</span><br></pre></td></tr></table></figure></p><p>这些储存操作默认都是最近的一次储存，当然，<code>pop</code>，<code>apply</code>，<code>drop</code>操作可以指定第几次储存，命令最后需要加<code>stash@{$num}</code>，比如默认的就是<code>stash@{0}</code>，但是省略掉了。<br>需要注意的是，能够储存的文件必须得是被<code>git</code>追踪的文件，<strong>如果一个新增的文件没有<code>add</code>过是不能被储存的</strong>。<br>还有一点储存的用处就是我之前丢弃修改的时候是先<code>git stash</code>，然后直接<code>git statsh clear</code>把储存删除，相当于丢弃了我的修改。</p><h4 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h4><p>回退的问题可以有很多花里胡哨的情况发生，还好我日常中遇到需要回退的情况比较少。</p><h5 id="丢弃工作区的内容"><a href="#丢弃工作区的内容" class="headerlink" title="丢弃工作区的内容"></a>丢弃工作区的内容</h5><p>工作区的内容，就是还没有执行<code>git add</code>的修改，可以用<code>git checkout</code>来丢弃修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- *</span><br></pre></td></tr></table></figure></p><h5 id="丢弃暂存区的内容"><a href="#丢弃暂存区的内容" class="headerlink" title="丢弃暂存区的内容"></a>丢弃暂存区的内容</h5><p>暂存区的内容，就是在执行了<code>git add</code>以后，但是还没有<code>git commit</code>，就需要使用<code>git reset</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD *</span><br></pre></td></tr></table></figure></p><p>这样可以把暂存区的内容回退到<code>git add</code>以前，然后可以使用<code>git checkout</code>来丢弃修改</p><h5 id="回退提交"><a href="#回退提交" class="headerlink" title="回退提交"></a>回退提交</h5><p>在提交了以后想要回退，然后要保留修改的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure></p><p>这是回退到上一个提交节点，每多退一次提交就加一个<code>^</code>，当然也可以用<code>HEAD~3</code>，这个<code>3</code>就表示要回退。<br>如果要回退并且直接丢弃所有修改，只需要把参数<code>--soft</code>改为<code>--hard</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>以上差不多就是我在工作之中使用<code>git</code>的一些收获，可能会有错误，如果发现有什么不对的地方还望指正</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用了一阵子&lt;code&gt;git&lt;/code&gt;，记录一下收获以及遇到的问题或者是解决办法，如果文章中有什么错误，或者有什么疑问可以指出交流 ：）&lt;/p&gt;
&lt;h3 id=&quot;git基本流程&quot;&gt;&lt;a href=&quot;#git基本流程&quot; class=&quot;headerlink&quot; title=&quot;git基本流程&quot;&gt;&lt;/a&gt;git基本流程&lt;/h3&gt;&lt;p&gt;可能以下流程不是标准的&lt;code&gt;git flow&lt;/code&gt;，但是日常开发中用的最多的也是这几个命令，有错之处还望指正&lt;br&gt;
    
    </summary>
    
      <category term="个人整理" scheme="http://chrischen0405.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/"/>
    
    
      <category term="git" scheme="http://chrischen0405.github.io/tags/git/"/>
    
      <category term="工具" scheme="http://chrischen0405.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="教程" scheme="http://chrischen0405.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="git flow" scheme="http://chrischen0405.github.io/tags/git-flow/"/>
    
      <category term="版本控制" scheme="http://chrischen0405.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="回退" scheme="http://chrischen0405.github.io/tags/%E5%9B%9E%E9%80%80/"/>
    
  </entry>
  
  <entry>
    <title>父元素由于子元素使用float而无法自适应高度</title>
    <link href="http://chrischen0405.github.io/2019/06/02/post20190602/"/>
    <id>http://chrischen0405.github.io/2019/06/02/post20190602/</id>
    <published>2019-06-02T07:35:57.000Z</published>
    <updated>2022-09-22T07:47:58.246Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍由于子元素使用<code>float</code>导致父元素无法自适应子元素的高度的解决方法。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>正常情况下，父元素不需要设置高度也可以自适应子元素的高度，举个例子，很简单的一个结构：<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们不给父元素设置高度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/img/post20190602/1.png" alt="未给父元素设置高度"><br>可以看到，虽然没有给父元素设置高度，但是父元素依旧被子元素撑开了。但是，当我们给子元素设置<code>float</code>以后：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;<span class="comment">/*给子元素设置浮动*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父元素的高度消失了：<br><img src="/img/post20190602/2.png" alt="给子元素设置浮动"><br>这是因为加了浮动以后元素会脱离标准的文档流，破坏inline-box，造成的后果就是没有高度，所以父元素无法获取子元素的高度，自然也无法自适应高度。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>接下来介绍解决子元素浮动以后父元素自适应高度的方法：</p><h3 id="方法一：设置父元素高度"><a href="#方法一：设置父元素高度" class="headerlink" title="方法一：设置父元素高度"></a>方法一：设置父元素高度</h3><p>如果在确定知道子元素高度的情况下，可以直接给父元素设置高度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;<span class="comment">/*给父元素设置高度*/</span></span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样虽然父元素没有被子元素撑起来高度，但也可以把子元素包住：<br><img src="/img/post20190602/3.png" alt="给父元素设置高度"><br>但是这样虽然可以解决问题，但也不是自适应高度啊，而且如果子元素高度不一定，这种办法也不是很好，接下来介绍方法二。</p><h3 id="方法二：父元素设置overflow属性"><a href="#方法二：父元素设置overflow属性" class="headerlink" title="方法二：父元素设置overflow属性"></a>方法二：父元素设置overflow属性</h3><p>在父元素的样式中设置<code>overflow</code>属性，可以是<code>hidden</code>或者是<code>auto</code>，都可以达到自适应设置了浮动的子元素高度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;<span class="comment">/*也可以设置成auto*/</span></span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父元素设置了<code>overflow</code>属性以后，不论子元素高度是多少，父元素都可以自适应高度：<br><img src="/img/post20190602/4.png" alt="父元素设置overflow属性"></p><h3 id="方法三：清除浮动"><a href="#方法三：清除浮动" class="headerlink" title="方法三：清除浮动"></a>方法三：清除浮动</h3><p>既然父元素高度消失是由于浮动造成的，那么我们清楚浮动不就可以了。我们在父元素结束标签<code>&lt;/div&gt;</code>前加入一个子元素，给它设置<code>class</code>为<code>clear</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--加一个子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后给该元素添加一个清除浮动的样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样子就可以实现清除浮动，也可以达到父元素自适应子元素高度的效果：<br><img src="/img/post20190602/5.png" alt="清除浮动"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>浮动说简单不简单，说难也不难，还是要平时多写多积累啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍由于子元素使用&lt;code&gt;float&lt;/code&gt;导致父元素无法自适应子元素的高度的解决方法。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;正常情况下，父元素不需要设置高度也可以自适应子元素的高度，举个例子，很简单的一个结构：&lt;br&gt;
    
    </summary>
    
      <category term="个人整理" scheme="http://chrischen0405.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/"/>
    
    
      <category term="CSS3" scheme="http://chrischen0405.github.io/tags/CSS3/"/>
    
      <category term="前端" scheme="http://chrischen0405.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="float" scheme="http://chrischen0405.github.io/tags/float/"/>
    
      <category term="清除浮动" scheme="http://chrischen0405.github.io/tags/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    
      <category term="html" scheme="http://chrischen0405.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>git使用流程</title>
    <link href="http://chrischen0405.github.io/2019/05/02/post20190502/"/>
    <id>http://chrischen0405.github.io/2019/05/02/post20190502/</id>
    <published>2019-05-02T15:58:52.000Z</published>
    <updated>2022-09-22T07:47:58.246Z</updated>
    
    <content type="html"><![CDATA[<p>之前大二的时候软件工程课程上了解了<code>git</code>用于版本控制，但是一直用的都是Sourcetree或者JetBrain自带的可视化版本控制系统，但是最近实习的时候渐渐接触了命令行使用<code>git</code>，发现命令行如果用习惯了以后比图形化界面方便多了。接下来介绍使用<code>git</code>作版本控制的基本使用流程。<br><a id="more"></a></p><ul><li>如果项目不在本地就从远程克隆，如果项目在本地就拉取新代码<ul><li><code>git clone [url]</code>——从<code>git</code>仓库克隆项目至本地</li><li><code>git pull --rebase origin master</code>——拉取远程<code>master</code>分支代码</li></ul></li><li>以<code>dev</code>分支开发来说<ul><li><code>git checkout dev</code>——切换到<code>dev</code>分支</li><li><code>git checkout -b dev</code>——新建并切换到<code>dev</code>分支</li></ul></li><li>完成<code>dev</code>部分的开发<ul><li><code>git add *</code>——首先将所有文件添加到版本控制系统</li><li><code>git commit -a -m &quot;提交理由&quot;</code>——提交代码并且填写理由</li><li><code>git push origin dev</code>——将<code>dev</code>分支代码提交至远端</li></ul></li><li>完成整个开发，除了以上部分以外，还要继续合并分支<ul><li><code>git checkout master</code>——切换到<code>master</code>分支</li><li><code>git merge dev</code>——合并<code>dev</code>分支</li><li><code>git merge --continue</code>——如果出现冲突，解决完以后继续合并分支</li><li><code>git push origin master</code>——将<code>master</code>分支代码提交至远端</li></ul></li><li>删除已经合并的分支<ul><li><code>git branch -d dev</code>——删除本地的<code>dev</code>分支</li><li><code>git push origin :dev</code>——删除远程的<code>dev</code>分支</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前大二的时候软件工程课程上了解了&lt;code&gt;git&lt;/code&gt;用于版本控制，但是一直用的都是Sourcetree或者JetBrain自带的可视化版本控制系统，但是最近实习的时候渐渐接触了命令行使用&lt;code&gt;git&lt;/code&gt;，发现命令行如果用习惯了以后比图形化界面方便多了。接下来介绍使用&lt;code&gt;git&lt;/code&gt;作版本控制的基本使用流程。&lt;br&gt;
    
    </summary>
    
      <category term="个人整理" scheme="http://chrischen0405.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/"/>
    
    
      <category term="git" scheme="http://chrischen0405.github.io/tags/git/"/>
    
      <category term="工具" scheme="http://chrischen0405.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="教程" scheme="http://chrischen0405.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>4月9日智康前端开发面试</title>
    <link href="http://chrischen0405.github.io/2019/04/10/post20190410/"/>
    <id>http://chrischen0405.github.io/2019/04/10/post20190410/</id>
    <published>2019-04-10T10:28:48.000Z</published>
    <updated>2022-09-22T07:47:58.245Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;昨天下午４点我去参加了智康的面试，智康是一家搞医疗的互联网公司，杭州是他们的分公司，去面试的时候发现人并没有很多，大概三四十个吧。这次面试体验比较不好，所以想要吐槽一番。<br><a id="more"></a><br>&#160; &#160; &#160; &#160;由于导师开会导致我稍稍迟到了一点，当然我也是和hr小姐姐说过了，然后她和我说没关系，hr小姐姐人还是很好的。面试环节，一开始是一个男的面试官技术面，一开始问基础问题，主要是问了一些数组和对象处理的问题，然后他都会问我js自带的方法。我其实没有准备，而且写毕设的时候用的也不是很多，我记得也不是很清楚，我就和他说js自带的方法名我记得不是很清楚了，结果他还是一直在问相关的问题，弄得我也很尴尬。然后是css的一些布局问题，说实话我css本来就比较弱，然后再加上之前js回答的不是很好，所以有点紧张，答得不是很好。然后着重问了简历上的项目，我其实说的还行，毕竟自己的项目。但是他总有一种咄咄逼人的感觉，让我不是很舒服。然后是hr小姐姐了解了一些基本情况，然后又讲了公司的一些情况，然后感觉薪资开低了，然后我让他们尽快给答复就准备走了。  </p><p>&#160; &#160; &#160; &#160;然后hr小姐姐又把我拉住，让负责微信小程序的再来面试一下我，这个面试官给我一种很冷漠的感觉，可能是搞技术的吧。就问了我一些微信小程序的基础，什么生命周期，页面跳转，传值，组件啥的，还好毕设是写的微信小程序，勉强能应付一下。但是和他的交流让我感觉很不舒服，面试的时候也没看着我，一直在看简历，给人一种很不尊重人的样子，然后他说差不多了，我就和ｈｒ打了招呼就走了。  </p><p>&#160; &#160; &#160; &#160;到了公司楼下，hr给我打电话，说方便再回来面试一下，上楼以后面我的应该是个副总级别的吧，就问了我大致情况，然后了解我大学四年干了啥，我就说了一些经历，然后她对我做视频感兴趣，就具体问了我用什么软件啊，干了啥啊之类的，还想看成果，我大学电视台的作品公众号找不着了，我自己个人b站的视频不是很好意思给她看，就拒绝了。然后又开始聊未来啥的，毕竟是管理层的人，就是会演讲，她就开始扯未来扯梦想，画大饼啥的，告诉我年轻人要肯吃苦啥的，说他们这个行业怎么怎么好。然后说要是下周可以报道就可以直接给我offer，但是给我一种施舍的感觉，所以我就和她说给我一天时间考虑考虑。  </p><p>&#160; &#160; &#160; &#160;然后今天我已经拒绝掉他们了。这家公司待遇还不错，而且活应该也还好，不会特别忙，但是由于同事和上司给我感觉不是很合适，我还是决定不去了。毕竟工作除了待遇，同事也很重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;昨天下午４点我去参加了智康的面试，智康是一家搞医疗的互联网公司，杭州是他们的分公司，去面试的时候发现人并没有很多，大概三四十个吧。这次面试体验比较不好，所以想要吐槽一番。&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://chrischen0405.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://chrischen0405.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="日志" scheme="http://chrischen0405.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>4月8日兔狗科技web前端面试题</title>
    <link href="http://chrischen0405.github.io/2019/04/08/post20190408/"/>
    <id>http://chrischen0405.github.io/2019/04/08/post20190408/</id>
    <published>2019-04-08T06:19:45.000Z</published>
    <updated>2022-09-22T07:47:58.244Z</updated>
    
    <content type="html"><![CDATA[<p>今天去面试了兔狗科技，记录一下这次面试，以前的面试忘记记录了都忘记题目了。。<br><a id="more"></a></p><h2 id="事件冒泡机制"><a href="#事件冒泡机制" class="headerlink" title="事件冒泡机制"></a>事件冒泡机制</h2><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>微软提出了名为<strong>事件冒泡</strong>(event bubbling)的事件流。事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>网景提出另一种事件流名为<strong>事件捕获</strong>(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。</p><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p>使用事件代理的好处不仅在于将多个事件处理函数减为一个，而且对于不同的元素可以有不同的处理方法。</p><h2 id="图片懒加载设计"><a href="#图片懒加载设计" class="headerlink" title="图片懒加载设计"></a>图片懒加载设计</h2><p>1、<code>img</code>标签的<code>data-src</code>属性上面保存着我们后面需要动态加载的图片地址，初始化时图片没有设置任何链接；<br>2、监听scroll事件，计算元素位置并且和浏览器视口相应宽高进行对比即可判断元素是否出现在可视区域中；<br>3、加载图片，判断是否需要显示图片，需要的话，立即从图片对象中的<code>data-src</code>属性中取得链接并赋值给当前图片的<code>src</code>进行加载</p><h2 id="HTML5语义化标签"><a href="#HTML5语义化标签" class="headerlink" title="HTML5语义化标签"></a>HTML5语义化标签</h2><h3 id="header元素"><a href="#header元素" class="headerlink" title="header元素"></a>header元素</h3><p><code>header</code>元素代表“网页”或“section”的页眉。通常包含<code>h1</code>-<code>h6</code>元素或<code>hgroup</code>，作为整个页面或者一个内容块的标题。也可以包裹一节的目录部分，一个搜索框，一个<code>nav</code>，或者任何相关logo。</p><h3 id="footer元素"><a href="#footer元素" class="headerlink" title="footer元素"></a>footer元素</h3><p><code>footer</code>元素代表“网页”或“section”的页脚，通常含有该节的一些基本信息，譬如：作者，相关文档链接，版权资料。如果<code>footer</code>元素包含了整个节，那么它们就代表附录，索引，提拔，许可协议，标签，类别等一些其他类似信息。</p><h3 id="nav元素"><a href="#nav元素" class="headerlink" title="nav元素"></a>nav元素</h3><p>nav元素代表页面的导航链接区域。用于定义页面的主要导航部分。</p><h3 id="aside元素"><a href="#aside元素" class="headerlink" title="aside元素"></a>aside元素</h3><p><code>aside</code>元素被包含在<code>article</code>元素中作为主要内容的附属信息部分，其中的内容可以是与当前文章有关的相关资料、标签、名次解释等。（特殊的<code>section</code>）</p><h3 id="section元素"><a href="#section元素" class="headerlink" title="section元素"></a>section元素</h3><p><code>section</code>元素代表文档中的“节”或“段”，“段”可以是指一篇文章里按照主题的分段；“节”可以是指一个页面里的分组。</p><h3 id="article元素"><a href="#article元素" class="headerlink" title="article元素"></a>article元素</h3><p><code>article</code>元素最容易跟<code>section</code>和<code>div</code>容易混淆，其实<code>article</code>代表一个在文档，页面或者网站中自成一体的内容，其目的是为了让开发者独立开发或重用。譬如论坛的帖子，博客上的文章，一篇用户的评论，一个互动的widget小工具。（特殊的<code>section</code>）</p><h2 id="js数组去重方法"><a href="#js数组去重方法" class="headerlink" title="js数组去重方法"></a>js数组去重方法</h2><p>我之前有篇博客已经整理过js常用的几种数组去重方法：<a href="https://chrischen0405.github.io/2018/09/03/post20180903/">《js实现数组去重的六种方法总结》</a>。</p><h2 id="MVVM原理"><a href="#MVVM原理" class="headerlink" title="MVVM原理"></a>MVVM原理</h2><p>MVVM是指数据层（Model）-视图层（View）-数据视图（ViewModel）的响应式框架。它包括：1.修改View层，Model对应数据发生变化。2.Model数据变化，不需要查找DOM，直接更新View。  </p><h3 id="MVVM的实现方式"><a href="#MVVM的实现方式" class="headerlink" title="MVVM的实现方式"></a>MVVM的实现方式</h3><p>采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><ul><li><strong>减少HTTP请求数</strong><br>(1)从设计实现层面简化页面<br>(2)合理设置HTTP缓存</li><li><strong>将资源合并与压缩</strong></li><li><strong>图片懒加载</strong></li><li><strong>将外部脚本置底</strong><br>浏览器是可以并发请求的，这一特点使得其能够更快的加载资源，然而外链脚本在加载时却会阻塞其他资源。所以将脚本尽可能的往后挪，可以减少对并发下载的影响。</li><li><strong>将CSS放在HEAD中</strong><br>如果将CSS放在其他地方比如<code>BODY</code>中，则浏览器有可能还未下载和解析到CSS就已经开始渲染页面了</li><li><strong>减少DOM操作</strong>  </li><li><strong>图片压缩</strong></li></ul><h2 id="xss和csrf"><a href="#xss和csrf" class="headerlink" title="xss和csrf"></a>xss和csrf</h2><h3 id="XSS：跨站脚本（Cross-site-scripting）"><a href="#XSS：跨站脚本（Cross-site-scripting）" class="headerlink" title="XSS：跨站脚本（Cross-site scripting）"></a>XSS：跨站脚本（Cross-site scripting）</h3><p>XSS全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有<code>JavaScript</code>的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p><h3 id="CSRF：跨站请求伪造（Cross-site-request-forgery）"><a href="#CSRF：跨站请求伪造（Cross-site-request-forgery）" class="headerlink" title="CSRF：跨站请求伪造（Cross-site request forgery）"></a>CSRF：跨站请求伪造（Cross-site request forgery）</h3><p>CSRF顾名思义，是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过<code>cookie</code>等方式辨识用户身份（包括使用服务器端<code>Session</code>的网站，因为<code>Session ID</code>也是大多保存在<code>cookie</code>里面的），再予以授权的。所以要伪造用户的正常操作，最好的方法是通过XSS或链接欺骗等途径，让用户在本机（即拥有身份<code>cookie</code>的浏览器端）发起用户所不知道的请求。</p><h2 id="跨域解决方式"><a href="#跨域解决方式" class="headerlink" title="跨域解决方式"></a>跨域解决方式</h2><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>利用<code>&lt;script&gt;</code>元素的这个开放策略，网页可以得到从其他来源动态产生的<code>JSON</code>数据。<code>JSONP</code>请求一定需要对方的服务器做支持才可以。<br><code>JSONP</code>优点是兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持<code>get</code>方法具有局限性。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>整个<code>CORS</code>通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，<code>CORS</code>通信与同源的<code>AJAX</code>通信没有差别，代码完全一样。浏览器一旦发现<code>AJAX</code>请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现<code>CORS</code>通信的关键是服务器。只要服务器实现了<code>CORS</code>接口，就可以跨源通信。<br><code>CORS</code>优点在于功能更加强大支持各种<code>HTTP Method</code>，缺点是兼容性不如<code>JSONP</code>。</p><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p><code>WebSocket</code>和<code>HTTP</code>都是应用层协议，都基于<code>TCP</code>协议。但是<code>WebSocket</code>是一种双向通信协议，在建立连接之后，<code>WebSocket</code>的<code>server</code>与<code>client</code>都能主动向对方发送或接收数据。同时，<code>WebSocket</code>在建立连接时需要借助<code>HTTP</code>协议，连接建立好了之后<code>client</code>与<code>server</code>之间的双向通信就与 <code>HTTP</code>无关了。</p><h3 id="nginx代理"><a href="#nginx代理" class="headerlink" title="nginx代理"></a>nginx代理</h3><p>通过<code>nginx</code>配置一个代理服务器（域名与<code>domain1</code>相同，端口不同）做跳板机，反向代理访问<code>domain2</code>接口，并且可以顺便修改<code>cookie</code>中<code>domain</code>信息，方便当前域<code>cookie</code>写入，实现跨域登录。</p><p>大致差不多就是这些问题，面试过程中有些答得不是很好，刚刚放完清明假期，也没有好好准备面试，部分题目面试完以后又上网查询了相关资料以后整理起来了，日后还是要多积累。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天去面试了兔狗科技，记录一下这次面试，以前的面试忘记记录了都忘记题目了。。&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://chrischen0405.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="前端" scheme="http://chrischen0405.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://chrischen0405.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="日志" scheme="http://chrischen0405.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>mysql报错：The server time zone value &#39;ÖÐ¹ú±ê×¼Ê±¼ä&#39; is unrecognized or represents more than one time zone.</title>
    <link href="http://chrischen0405.github.io/2019/03/09/post20190309/"/>
    <id>http://chrischen0405.github.io/2019/03/09/post20190309/</id>
    <published>2019-03-09T06:45:56.000Z</published>
    <updated>2022-09-22T07:47:58.223Z</updated>
    
    <content type="html"><![CDATA[<p>最近写毕设的时候遇到了<code>mysql</code>出现<code>The server time zone value &#39;ÖÐ¹ú±ê×¼Ê±¼ä&#39; is unrecognized or represents more than one time zone.</code>这个报错。<br><a id="more"></a><br><img src="/img/post20190309/error.png" alt><br>出现这个报错的原因是时区错误。可以用这个方法解决。</p><p>首先打开<code>cmd</code>，然后<code>cd</code>进入<code>mysql</code>的安装目录，先登录<code>mysql</code>：<br><code>mysql -uroot -proot</code></p><p>上面命令<code>-u</code>和<code>-p</code>后面跟的分别是用户名和密码。登录成功以后再设置时区：<br><code>set global time_zone=&#39;+8:00&#39;;</code><br>输入该命令以后提示ok就可以了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写毕设的时候遇到了&lt;code&gt;mysql&lt;/code&gt;出现&lt;code&gt;The server time zone value &amp;#39;ÖÐ¹ú±ê×¼Ê±¼ä&amp;#39; is unrecognized or represents more than one time zone.&lt;/code&gt;这个报错。&lt;br&gt;
    
    </summary>
    
      <category term="踩坑" scheme="http://chrischen0405.github.io/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
      <category term="mysql" scheme="http://chrischen0405.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>jQuery解除绑定的点击事件</title>
    <link href="http://chrischen0405.github.io/2018/12/07/post20181207/"/>
    <id>http://chrischen0405.github.io/2018/12/07/post20181207/</id>
    <published>2018-12-07T06:19:46.000Z</published>
    <updated>2022-09-22T07:47:58.223Z</updated>
    
    <content type="html"><![CDATA[<p>平时，我们总会有需要让某个点击事件失效的情况，在实习中我就遇到了这个问题：点击一个按钮以后触发动画，在触发动画的那段时间里，需要把该按钮的点击事件取消，接下来就介绍一下jQuery如何解除绑定的点击事件。</p><a id="more"></a><p>要解绑点击事件，那么首先就要了解一下如何绑定点击事件，当然，可以使用jQuery的<code>click</code>方法为元素绑定点击事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>也可以用jQuery的<code>bind</code>方法来实现点击事件的绑定：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).bind(<span class="string">'click'</span>, hello);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来介绍一下解除事件绑定的方法<code>unbind</code>，这个方法的语法是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).unbind(event,<span class="function"><span class="keyword">function</span>);</span></span><br></pre></td></tr></table></figure></p><ul><li>event：可选参数。规定删除元素的一个或多个事件由空格分隔多个事件值。</li><li>function：可选参数。规定从元素的指定事件取消绑定的函数名。</li></ul><p>我们想要解除绑定的点击事件，可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).unbind(<span class="string">'click'</span>);</span><br></pre></td></tr></table></figure></p><p>当然， 这样会使该元素所有的点击事件都失效，如果只想让绑定的某个点击事件失效，可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).unbind(<span class="string">'click'</span>,hello);</span><br></pre></td></tr></table></figure></p><p>当然，如果这个元素只绑定了一个点击事件，可以简单地这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).unbind();</span><br></pre></td></tr></table></figure></p><p>把两个参数都省略，这样子，会把该元素所有绑定的事件都解绑，不仅仅是点击事件了。</p><p>需要注意的是，<code>unbind</code>方法中参数只能是函数名，而不能是匿名函数，比如那么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).unbind(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//无效</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>这样就无法解绑了，即使绑定的函数和解绑的函数的两个匿名函数一样，这是因为函数是引用类型。总之<code>unbind</code>方法的参数要填函数方法名不要填匿名函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时，我们总会有需要让某个点击事件失效的情况，在实习中我就遇到了这个问题：点击一个按钮以后触发动画，在触发动画的那段时间里，需要把该按钮的点击事件取消，接下来就介绍一下jQuery如何解除绑定的点击事件。&lt;/p&gt;
    
    </summary>
    
      <category term="个人整理" scheme="http://chrischen0405.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/"/>
    
    
      <category term="jQuery" scheme="http://chrischen0405.github.io/tags/jQuery/"/>
    
      <category term="事件绑定" scheme="http://chrischen0405.github.io/tags/%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
    
      <category term="事件解绑" scheme="http://chrischen0405.github.io/tags/%E4%BA%8B%E4%BB%B6%E8%A7%A3%E7%BB%91/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo发布文章报错can not read a block mapping entry</title>
    <link href="http://chrischen0405.github.io/2018/11/21/post20181121-2/"/>
    <id>http://chrischen0405.github.io/2018/11/21/post20181121-2/</id>
    <published>2018-11-21T09:08:10.000Z</published>
    <updated>2022-09-22T07:47:58.222Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用hexo发布文章，输入指令<code>hexo g</code>的时候出现了如题的错误：<br><code>can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 5:</code><br><a id="more"></a><br>网上找了一圈，都说是设置属性后面要加空格，但是我明明都加了空格，依旧报错：</p><p><img src="/img/post20181121-2/false.png" alt></p><p>这是因为配置中出现了<code>&quot;&quot;</code>，导致文章无法按照正确yaml语法解析出错，把英文双引号改成中文双引号就好了：</p><p><img src="/img/post20181121-2/right.png" alt></p><p>总之要严格按照yaml语法来写文章头部的配置才行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天使用hexo发布文章，输入指令&lt;code&gt;hexo g&lt;/code&gt;的时候出现了如题的错误：&lt;br&gt;&lt;code&gt;can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 5:&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="踩坑" scheme="http://chrischen0405.github.io/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
      <category term="hexo" scheme="http://chrischen0405.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>“The Rise of JavaScript”中文翻译</title>
    <link href="http://chrischen0405.github.io/2018/11/21/post20181121/"/>
    <id>http://chrischen0405.github.io/2018/11/21/post20181121/</id>
    <published>2018-11-21T08:24:48.000Z</published>
    <updated>2022-09-22T07:47:58.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的崛起"><a href="#JavaScript的崛起" class="headerlink" title="JavaScript的崛起"></a>JavaScript的崛起</h1><p><strong>Massimo DiPierro</strong> DePaul University<br><a id="more"></a><br>&emsp;&emsp;仅在几年前，JavaScript（JS）是一种被许多人蔑视的编程语言。如今，JS非常受欢迎，是增长速度最快的编程语言之一。无论是否为网络发展，都不容忽视。事实上，正如我们在此论证的那样，JS是一种用于某类科学应用的优秀开发语言。</p><p>&emsp;&emsp;Brendan Eich在1995年发明了JS，JS被用来作为在Netscape Navigator中编程的一种方式，Netscape Navigator是最早的流行网络浏览器之一。之后随着时间的推移，其他的浏览器也已经采用了JS作为主要语言来为网页添加逻辑。 此后，各种各样的实现汇集成了一个单独的增强的标准。  </p><p>&emsp;&emsp;尽管JS最初是作为解释语言开发的，但是现代浏览器很聪明，如果他们观察到某个JS函数被经常调用，那么他们就会使用JIT编译[^1]。 这使得JS成为一种非常快速的语言，在某些情况下几乎与C或C ++一样快，并且通常比Java更快（尽管两者名称相似，但Java和JavaScript没有关系）。作为一种主要在浏览器中运行的语言，JS提供了一个标准API来处理HTML和JSON; 处理网络协议;在画布上作画; 并能够与计算机的相机，音频，GPS，陀螺仪甚至GPU等设备连接。 最新版本的JS称为ECMAScript 6，简称ES6。  </p><p>&emsp;&emsp;2009年，Ryan Dahl发明了node.js，这是一个不需要浏览器，而可以将JS代码运行在服务器端的解释器。从那时起，基于JS的命令行工具不断涌现。 Node.js包含一个名为Node Package Manager（npm）的包管理器，可以轻松下载其他模块并管理依赖项。这种模块的一个例子是Babel，它可以将现代ES6编译为以前版本的JS以实现可移植性。另一个例子是Browserify，它允许将多个JS文件及其依赖项打包到一个单独的可移植的.js文件中，以便于分发。  </p><p>&emsp;&emsp;JS历史上的另一个重要的事件是2013年发明的asm.js。这种中间编程语言允许C编译成JS的可移植的优化子集。 因为asm.js的出现，使得浏览器可以运行整个虚拟机（VM）以及运行其中的任何操作系统。 例如，要运行Linux，只需访问jslinux.org。如今，许多语言都可以编译成JS，包括Python。  </p><p>&emsp;&emsp;如果我们说服您尝试使用JS，那么您需要注意一些特征。 这些特征可能会让具有其他语言经验的程序员感到困惑：</p><ul><li>直到2015年，JS还没有“class”关键字。 尽管如此，JS始终是一种面向对象的编程语言，支持封装，继承，多态和抽象的基本功能。 所谓的原型接口允许创建原型对象，从中可以产生其他对象。 关键字“class”纯粹作为语法糖[^2]添加。</li><li>一个重要的特征是执行模型。 在JS中，代码总是单线程运行的，并且两个函数不可能同时运行。一个线程维护一个要执行的异步任务队列。每次调用一个函数时，它都作为闭包（与调用环境的副本一起）放入队列中，队列中的函数按照它们被调用的顺序执行。 函数也可以安排在稍后运行或在另一个函数运行后（promises[^3]）运行。  </li></ul><p>&emsp;&emsp;在本期CiSE特刊中，我们专注于用JS编写的一小部分库和工具，可能会让科学家和工程师感兴趣。 当然，我们的目标不是详尽无遗，也不具代表性，因为考虑到了巨大并且在迅速扩大的领域，而是为了激发读者的好奇心并向他们展示JS中某些任务非常简单。 特别是，我们将涵盖以下任务：</p><ul><li><strong>使用Emscripten将C / C ++代码编译为JS。</strong>在他的文章中，Alon Zakai回顾了asm.js，WebAssembly和Emscripten的性能。 他还演示了如何使用后者编译实现Ising模型[^4]的C ++代码到JS代码中，而无需读取或编写一行JS。</li><li><strong>执行符号数学。</strong>Jos de Jong和Eric Mansfield提供了math.js的教程，这是一个用JS实现的符号计算的可扩展库。Math.js带有一个记事本，就像Mathematica Notebook或Jupyter Notebook的轻量级版本，除了它完全在用户的浏览器中运行。</li><li><strong>GPU编程。</strong>Fazli Sapuan，Matthew Saw和Eugene Cheah为gpu.js提供了一个教程，这是一个为GPU提供编程接口的库。 非常像CUDA和OpenCL，在gpu.js中，使用JS开发内核程序，该程序实时编译并部署到GPU的多个线程/核心。 因为这都是在浏览器中的JS中完成的，所以它允许真正的GPU编程，而无需安装任何第三方开发工具。</li><li><strong>试验相机和机器视觉。</strong>在我的论文中，我演示了如何使用JS ES6编写代码来访问计算机网络摄像头，处理帧以检测运动，并使用观察到的运动来控制模拟的3D机器人手臂。对于后者，可以使用three.js，这是一个功能强大的库，可以利用计算机GPU来构建和渲染复杂的3D对象，如纹理和照明。</li><li><strong>创建复杂的接口。</strong>在最后的论文中，Ibrahim Tanyalcin，Carla Al Assaf，Julien Ferte，FrançoisAncien，Taushif Khan，Guillaume Smits，Marianne Rooman和Wim Vranken介绍了Mutaframe，这是一个可扩展的DNA序列和突变可视化框架。  </li></ul><p>&emsp;&emsp;我希望你确信JS是一种认真，强大，快速的语言。 更重要的是，JS是在浏览器端构建复杂和现代接口（新代码和现有代码）不可或缺的语言，JS可以在用户的浏览器中运行，而无需安装第三方工具。 很多时候，优秀的科学代码隐藏在神秘的用户接口和长链依赖之后。 使代码在网络上具有交互性和可访问性应被视为科学家的首要任务。</p><p>[^1]: JIT编译（just-in-time compilation），狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”。<br>[^2]: 语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。<br>[^3]: Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。<br>[^4]: Ising模型（伊辛模型）是一个最简单且能够提供非常丰富的物理内容的模型，可用于描写叙述非常多物理现象。  </p><h1 id="The-Rise-of-JavaScript"><a href="#The-Rise-of-JavaScript" class="headerlink" title="The Rise of JavaScript"></a>The Rise of JavaScript</h1><p><strong>Massimo DiPierro</strong> DePaul University<br>Only a few years ago, JavaScript (JS) was a programming language disdained by many. Today, JS is very popular and one of the fastest-growing programming languages. It cannot be ignored, whether one develops for the web or not. In fact, as we will argue here, JS is an excellent development language for a certain class of scientific applications.  </p><p>Brendan Eich invented JS in 1995 as a way to program one of the first popular web browsers, Netscape Navigator. Over time, other browsers have adopted JS as a primary language to add logic to webpages. The various implementations have since converged into a single, enhanced standard.  </p><p>Even if originally developed as an interpreted language, modern browsers are smart, and if they observe that a certain JS function is called often, they compile it using a just-in-time (JIT) compiler. This makes JS a very fast language, almost as fast as C/C++ in some instances and usually faster than Java (which isn’t related to JS, despite the name similarity). As a language designed to run primarily in the browser, JS provides a standard API to process HTML and JSON; handle network protocols; draw on a canvas; and interface with devices such as the computer’s camera, audio, GPS, gyroscope, and even the GPU. The latest version of JS is called ECMAScript 6, or ES6 for short.  </p><p>In 2009, Ryan Dahl invented node.js, an interpreter for running JS code server-side without the need for a browser. Since then, there has been a proliferation of command-line tools based on JS. Node.js includes a package manager called Node Package Manager (npm), which makes it easy to download additional modules and manage dependencies. One example of such modules is Babel, which can compile modern ES6 to previous versions of JS for portability. Another example is Browserify, which allows packaging of multiple JS files and their dependencies into a single portable .js file for ease of distribution.  </p><p>Another major step in the history of JS was the invention of asm.js in 2013. This intermediate programming language allows C to compile into a portable and optimized subset of JS. Thanks to asm.js, it is possible to run an entire virtual machine (VM) in the browser and run any operating system in it. For example, to run Linux, just visit jslinux.org. Today, many languages can be compiled into JS, including Python.  </p><p>If we have convinced you to try JS, there are a couple of features that you need to be aware of. These features can be confusing to programmers with experience in other languages:  </p><ul><li>Until 2015, JS did not have a “class” keyword. Despite that, JS was always an objectoriented programming language with support for the basic functionalities of encapsulation, inheritance, polymorphism, and abstraction. The so-called prototype interface allows the creation of a prototype object from which other objects can be made. The keyword “class” was added purely as syntactic sugar.</li><li>An important feature is the execution model. In JS, the code always runs single threaded, and it is impossible for two functions to run at the same time. That one thread maintains a queue of asynchronous tasks to be executed. Every time a function is called,it is placed in the queue as a closure (together with a copy of the calling environment), and functions in the queue are executed in the order in which they were called. Functions can also be scheduled to run at a later time or after another function has run (promises). </li></ul><p>In this special issue of CiSE, we focus on a small sample of libraries and tools written in JS that might interest scientists and engineers. Our goal is, of course, not to be exhaustive nor representative—given the huge and rapidly expanding field—but to spark the reader’s curiosity and show how certain tasks are remarkably easy in JS. In particular, we will cover the following tasks:</p><ul><li><strong>Compile C/C++ code to JS using Emscripten.</strong> In his article, Alon Zakai reviews the performance of asm.js, WebAssembly, and Emscripten. He also demonstrates how to use the latter to compile C++ code implementing the Ising model into JS code, without having to read or write one line of JS.</li><li><strong>Perform symbolic math.</strong> Jos de Jong and Eric Mansfield provide a tutorial for math.js, an extensible library for symbolic computations implemented in JS. Math.js comes with a notepad that is like a lightweight version of the Mathematica Notebook or the Jupyter Notebook, except that it runs completely in the user’s browser.</li><li><strong>Program the GPU.</strong> Fazli Sapuan, Matthew Saw, and Eugene Cheah contributed a tutorial for gpu.js, a library that provides a programming interface to the GPU. Very much like CUDA and OpenCL, in gpu.js, one develops a kernel program using JS that is compiled in real time and deployed to the multiple threads/cores of the GPU. Because this is all done in JS within the browser, it allows for real GPU programming without the need to install any third-party development tools.</li><li><strong>Experiment with a camera and machine vision.</strong> In my paper, I demonstrate how to write code using JS ES6 to access the computer web camera, process the frames to detect movement, and use the observed movements to control a simulated 3D robotic arm. For the latter, one can use three.js, a powerful library that can take advantage of the computer GPU to build and render complex 3D objects such as textures and lighting.</li><li><strong>Create complex interfaces.</strong> In the final paper, Ibrahim Tanyalcin, Carla Al Assaf, Julien Ferte, François Ancien, Taushif Khan, Guillaume Smits, Marianne Rooman, and Wim Vranken provide an introduction to Mutaframe, an extensible framework for the visualization of DNA sequences and mutations.  </li></ul><p>I hope you are convinced that JS is a serious, powerful, and fast language. And more importantly, that JS is an indispensable language for building complex and modern interfaces (to new and existing code) that can run in the user’s browser without the need to install third-party tools. Too often, excellent scientific code is hidden behind arcane user interfaces and long chains of dependencies. Making the code interactive and accessible on the web should be considered a priority for scientists.  </p><p><strong>ABOUT THE AUTHOR</strong><br><strong>Massimo DiPierro</strong> is a professor in the School of Computing at DePaul University and codirector of the MS program in computational finance. Contact him at <a href="mailto:massimo.dipierro@depaul.edu" target="_blank" rel="noopener">massimo.dipierro@depaul.edu</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的崛起&quot;&gt;&lt;a href=&quot;#JavaScript的崛起&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的崛起&quot;&gt;&lt;/a&gt;JavaScript的崛起&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Massimo DiPierro&lt;/strong&gt; DePaul University&lt;br&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://chrischen0405.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="JavaScript" scheme="http://chrischen0405.github.io/tags/JavaScript/"/>
    
      <category term="翻译" scheme="http://chrischen0405.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>js使用正则获取当前页面url指定参数</title>
    <link href="http://chrischen0405.github.io/2018/11/09/tools1/"/>
    <id>http://chrischen0405.github.io/2018/11/09/tools1/</id>
    <published>2018-11-09T08:48:34.000Z</published>
    <updated>2022-09-22T07:47:58.250Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QueryString</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sValue = location.search.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[\?\&amp;]"</span> + item + <span class="string">"=([^\&amp;]*)(\&amp;?)"</span>, <span class="string">"i"</span>));</span><br><span class="line">    <span class="keyword">return</span> sValue ? sValue[<span class="number">1</span>] : sValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h3><p>网址：<code>http://1.com/</code><br>调用：<code>QueryString(&#39;name&#39;)</code><br>返回：<code>null</code></p><h3 id="有参数"><a href="#有参数" class="headerlink" title="有参数"></a>有参数</h3><p>网址：<code>http://1.com/?name=cwj&amp;age=21</code><br>调用：<code>QueryString(&#39;name&#39;)</code><br>返回：<code>cwj</code></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>现在随便拿一个网址：<code>https://m.weibo.cn/u/5902368392?topnav=1&amp;wvr=6&amp;is_all=1&amp;jumpfrom=weibocom</code>，这个网址的<code>location</code>是：</p><p><img src="/img/tools1/location.png" alt></p><p>所以这个地址的<code>location.search</code>是<code>?topnav=1&amp;wvr=6&amp;is_all=1&amp;jumpfrom=weibocom</code>，这就是需要执行匹配的字符串</p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><code>match()</code>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>存放匹配结果的数组。在这个方法中将匹配结果放在了数组<code>sValue</code>中。</p><h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><p><code>RegExp</code>对象表示正则表达式</p><p>该对象接受两个参数，第一个参数是一个字符串，指定了正则表达式的模式或其他正则表达式。第二个参数<code>i</code>代表着区分大小写的匹配。</p><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><h4 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h4><ul><li><code>[\?\&amp;]</code>代表从<code>?</code>或<code>&amp;</code>开始匹配</li><li><code>item</code>即传入的参数名</li><li><code>([^\&amp;]*)</code>匹配到<code>&amp;</code>为止，并把结果存放在数组<code>sValue</code></li><li><code>(\&amp;?)</code>匹配<code>&amp;</code>零次或一次，并存放在数组<code>sValue</code><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4>调用该方法：<code>QueryString(&#39;wvr&#39;)</code>，根据以上正则表达式匹配出来的结果是：</li></ul><p><img src="/img/tools1/result.png" alt></p><p>要注意的是<code>match</code>方法返回的数组<code>0</code>位置是匹配的字符串，所以相应参数在<code>sValue[1]</code>中</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QueryString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sValue = location.search.match(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;[\?\&amp;amp;]&quot;&lt;/span&gt; + item + &lt;span class=&quot;string&quot;&gt;&quot;=([^\&amp;amp;]*)(\&amp;amp;?)&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;i&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sValue ? sValue[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] : sValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://chrischen0405.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="JavaScript" scheme="http://chrischen0405.github.io/tags/JavaScript/"/>
    
      <category term="正则" scheme="http://chrischen0405.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="URL" scheme="http://chrischen0405.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>圣杯布局和双飞翼布局的实现</title>
    <link href="http://chrischen0405.github.io/2018/11/05/post20181105/"/>
    <id>http://chrischen0405.github.io/2018/11/05/post20181105/</id>
    <published>2018-11-05T05:30:29.000Z</published>
    <updated>2022-09-22T07:47:58.222Z</updated>
    
    <content type="html"><![CDATA[<p>在CSS中有两种经典的布局，是圣杯布局和双飞翼布局，说是两种，其实这两种布局实现的效果都是一样的，都是三栏布局，左右两边固定宽度，中间自适应，只是两种布局的实现方式不同而已。<br><a id="more"></a></p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局主要是利用浮动和负边距，将左右两个<code>div</code>的<code>position</code>设置为<code>relative</code>来完成布局，长得是这个样子的：</p><p><img src="/img/post20181105/圣杯布局.png" alt></p><p><strong>页面结构</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>样式</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>, <span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span>, <span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>双飞翼布局也是浮动和负边距，不过和圣杯布局不同的是，双飞翼布局是在中间的<code>div</code>中再加入一个<code>div</code>使中间的内容自适应，表现出来是和圣杯布局一样的：</p><p><img src="/img/post20181105/双飞翼布局.png" alt></p><p><strong>页面结构</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>样式</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>, <span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span>, <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#9a9a9a</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在CSS中有两种经典的布局，是圣杯布局和双飞翼布局，说是两种，其实这两种布局实现的效果都是一样的，都是三栏布局，左右两边固定宽度，中间自适应，只是两种布局的实现方式不同而已。&lt;br&gt;
    
    </summary>
    
      <category term="个人整理" scheme="http://chrischen0405.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/"/>
    
    
      <category term="HTML5" scheme="http://chrischen0405.github.io/tags/HTML5/"/>
    
      <category term="CSS3" scheme="http://chrischen0405.github.io/tags/CSS3/"/>
    
      <category term="布局" scheme="http://chrischen0405.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="圣杯布局" scheme="http://chrischen0405.github.io/tags/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"/>
    
      <category term="双飞翼布局" scheme="http://chrischen0405.github.io/tags/%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    
      <category term="前端" scheme="http://chrischen0405.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>基于lufylegend和cropper自定义图片的拼图华容道</title>
    <link href="http://chrischen0405.github.io/2018/11/01/post20181101/"/>
    <id>http://chrischen0405.github.io/2018/11/01/post20181101/</id>
    <published>2018-11-01T05:32:49.000Z</published>
    <updated>2022-09-22T07:47:58.222Z</updated>
    
    <content type="html"><![CDATA[<p>前几天公司要做一个拼图的小游戏，我看到了<a href="https://blog.csdn.net/yorhomwang/article/details/52133498" target="_blank" rel="noopener">《速度挑战 - 2小时完成HTML5拼图小游戏》</a>，照着写完了一个小游戏以后，这几天使用<a href="http://fengyuanchen.github.io/cropper/" target="_blank" rel="noopener">cropper</a>和<a href="http://lufylegend.com/" target="_blank" rel="noopener">lufylegend</a>游戏引擎制作了一款简单的可以自定义图片的拼图华容道游戏，该游戏除了实现基本的游戏功能以外，还支持游戏图片上传，剪切，以及图片过大可以进行压缩的功能。<br><a id="more"></a></p><p><a href="https://chrischen0405.github.io/Demo/canvas/lufylegend/index.html">传送门</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>俗话说“兵马未动粮草先行”，在直接开始撸游戏之前，需要先做一些准备：<br>（1）<strong>cropper</strong><br><a href="http://fengyuanchen.github.io/cropper/" target="_blank" rel="noopener">cropper</a>是一款使用简单且功能强大的图片剪裁jQuery插件，我选择使用该插件来实现图片裁剪的功能，在使用之前需要引入cropper：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/cropperjs/1.3.6/cropper.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/cropperjs/1.3.6/cropper.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>（2）<strong>jQuery</strong><br>jQuery就不多说了，cropper就是jQuery的插件，自然需要引入，需要注意的是<strong>jQuery需要在cropper之前引入</strong><br>（3）<strong>lufylegend</strong><br><a href="http://lufylegend.com/" target="_blank" rel="noopener">lufylegend</a>是一个HTML5开源引擎，使用之前需要引入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/lib/lufylegend-1.10.1.simple.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>（4）WeUI<br><a href="https://weui.io/" target="_blank" rel="noopener">WeUI</a>是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。使用这个ui库主要是使用了<code>gallery</code>用来展示上传的图片用于下一步的裁剪，要使用的话也需要引入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://res.wx.qq.com/open/libs/weui/1.1.2/weui.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/open/libs/weuijs/1.1.3/weui.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>在做好之前的准备以后，就可以开始撸游戏了</p><h3 id="1-布局"><a href="#1-布局" class="headerlink" title="1.布局"></a>1.布局</h3><p>游戏本身只需要一个<code>div</code>，整个页面分为两块，图片上传模块和游戏模块，整体还是比较简单，之后可以继续增加其他的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图片上传按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-uploader__input-box getImg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"getImg"</span> <span class="attr">class</span>=<span class="string">"weui-uploader__input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图片上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"uploadPhotoBox"</span> <span class="attr">class</span>=<span class="string">"page gallery js_show img"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-gallery"</span> <span class="attr">style</span>=<span class="string">"display: block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"photoBox"</span> <span class="attr">class</span>=<span class="string">"photo weui-gallery__img"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"photo"</span> <span class="attr">style</span>=<span class="string">"max-width: 100%"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tool"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"crop"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"cancel"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--游戏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"game"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span>时间： <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>99<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"steps"</span>&gt;</span>步数： <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"steps"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myGame"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>还有一点点样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.time</span>, <span class="selector-class">.steps</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">margin-left</span>: <span class="number">20%</span>;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">5%</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.steps</span> &#123;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">10%</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.tool</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#111111</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.tool</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">            <span class="attribute">color</span>: white;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">float</span>: right;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="number">2rem</span>;</span><br><span class="line">            <span class="attribute">padding-right</span>: <span class="number">2rem</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#cancel</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-定义全局变量"><a href="#2-定义全局变量" class="headerlink" title="2.定义全局变量"></a>2.定义全局变量</h3><p>首先需要定义一些变量，并且添加一些简单的逻辑事件，例如鼠标点击：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imgResult;<span class="comment">//裁剪出来图片的base64值</span></span><br><span class="line"><span class="keyword">var</span> imgResultImg = <span class="keyword">new</span> Image();<span class="comment">//裁剪出来的图片对象</span></span><br><span class="line"><span class="keyword">var</span> flObj = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#getImg'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#file'</span>).bind(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//文件上传控件绑定监听事件</span></span><br><span class="line">        <span class="keyword">var</span> file = $(<span class="keyword">this</span>).val();</span><br><span class="line">        <span class="keyword">if</span> (file.length &gt; <span class="number">0</span>) &#123;<span class="comment">//文件不为空时自动提交图片</span></span><br><span class="line">            uploadImg();<span class="comment">//图片提交</span></span><br><span class="line">            $(<span class="string">'#photoBox'</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>);</span><br><span class="line">            $(<span class="string">'.getImg'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'#file'</span>).click();</span><br><span class="line">    $(<span class="string">'#uploadPhotoBox'</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#cancel'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//取消图片提交</span></span><br><span class="line">    <span class="built_in">window</span>.location.reload();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上面的<code>uploadImg()</code>函数会在之后有定义</p><h3 id="3-图片处理部分"><a href="#3-图片处理部分" class="headerlink" title="3.图片处理部分"></a>3.图片处理部分</h3><p>需要完成图片的上传，压缩，裁剪功能</p><h4 id="3-1-图片上传"><a href="#3-1-图片上传" class="headerlink" title="3.1 图片上传"></a>3.1 图片上传</h4><p>在用户选择文件以后要先判断是否是图片，然后再判断图片大小确定是否要压缩，然后才能开始裁剪<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params"></span>) </span>&#123;<span class="comment">//图片上传</span></span><br><span class="line">    $(<span class="string">'#photoBox'</span>).empty();</span><br><span class="line">    $(<span class="string">'#photoBox'</span>).html(<span class="string">'&lt;img id="photo" src=""&gt;'</span>);</span><br><span class="line">    <span class="keyword">var</span> file = flObj.files[<span class="number">0</span>];<span class="comment">//因为每次只上传了一张图片，所以获取到flObj.files[0];</span></span><br><span class="line">    <span class="keyword">var</span> fReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="keyword">var</span> isImage = checkFile(file);<span class="comment">//检查文件是否为图像类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isImage) &#123;</span><br><span class="line">        alert(<span class="string">"请确保文件为图像类型"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fReader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> imageSize = e.total; <span class="comment">//图片大小</span></span><br><span class="line">            <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">            image.src = e.target.result;</span><br><span class="line">            image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//判断是否需要压缩图片</span></span><br><span class="line">                image = judgeCompress(image, imageSize);</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"photo"</span>).src = image.src;</span><br><span class="line">                cropper(<span class="built_in">document</span>.getElementById(<span class="string">"photo"</span>), options);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fReader.readAsDataURL(isImage);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>检查文件是否为图像类型：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">file</span>) </span>&#123;<span class="comment">//检查文件是否为图像类型</span></span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">    <span class="comment">//使用正则表达式匹配判断</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/image\/\w+/</span>.test(file.type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-2-图片压缩"><a href="#3-2-图片压缩" class="headerlink" title="3.2 图片压缩"></a>3.2 图片压缩</h4><p>在图片压缩之前，需要先检查图片大小，图片过大才需要压缩：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeCompress</span>(<span class="params">image, imageSize</span>) </span>&#123;<span class="comment">//判断图片大小</span></span><br><span class="line">    <span class="comment">//判断图片是否大于300000 bit</span></span><br><span class="line">    <span class="keyword">var</span> threshold = <span class="number">300000</span>; <span class="comment">//阈值,可根据实际情况调整</span></span><br><span class="line">    <span class="keyword">if</span> (imageSize &gt; threshold) &#123;</span><br><span class="line">        <span class="keyword">var</span> imageData = compress(image);<span class="comment">//图片压缩</span></span><br><span class="line">        <span class="keyword">var</span> newImage = <span class="keyword">new</span> Image();</span><br><span class="line">        newImage.src = imageData;</span><br><span class="line">        <span class="keyword">return</span> newImage;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>图片压缩是使用<code>canvas</code>实现，先将图片绘制出来，然后再讲绘制出来的图片保存为图片对象以完成压缩，代码实现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">image</span>) </span>&#123;<span class="comment">//图片压缩</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> originWidth = image.width;</span><br><span class="line">    <span class="keyword">var</span> originHeight = image.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> maxWidth = <span class="number">800</span>,</span><br><span class="line">        maxHeight = <span class="number">800</span>;</span><br><span class="line">    <span class="comment">// 目标尺寸</span></span><br><span class="line">    <span class="keyword">var</span> targetWidth = originWidth,</span><br><span class="line">        targetHeight = originHeight;</span><br><span class="line">    <span class="comment">// 图片尺寸超过800x800的限制</span></span><br><span class="line">    <span class="keyword">if</span> (originWidth &gt; maxWidth || originHeight &gt; maxHeight) &#123;</span><br><span class="line">        <span class="keyword">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123;</span><br><span class="line">            <span class="comment">// 更宽，按照宽度限定尺寸</span></span><br><span class="line">            targetWidth = maxWidth;</span><br><span class="line">            targetHeight = <span class="built_in">Math</span>.round(maxWidth * (originHeight / originWidth));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetHeight = maxHeight;</span><br><span class="line">            targetWidth = <span class="built_in">Math</span>.round(maxHeight * (originWidth / originHeight));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.height = targetHeight;</span><br><span class="line">    canvas.width = targetWidth;</span><br><span class="line">    ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">    <span class="comment">//压缩操作</span></span><br><span class="line">    <span class="keyword">var</span> quality = <span class="number">0.8</span>; <span class="comment">//图片质量  范围：0&lt;quality&lt;=1 根据实际需求调正</span></span><br><span class="line">    <span class="keyword">var</span> imageData = canvas.toDataURL(<span class="string">"image/jpeg"</span>, quality);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> imageData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-3-图片裁剪"><a href="#3-3-图片裁剪" class="headerlink" title="3.3 图片裁剪"></a>3.3 图片裁剪</h4><p>得到了处理完成的图片以后，就可以进行图片裁剪了，首先先按照官网进行插件的配置，我把它们写在了一个对象中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    aspectRatio: <span class="number">1</span>,  <span class="comment">//宽高比</span></span><br><span class="line">    preview: <span class="string">'.preview'</span>,  <span class="comment">//预览窗口</span></span><br><span class="line">    guides: <span class="literal">true</span>,  <span class="comment">//裁剪框的虚线</span></span><br><span class="line">    autoCropArea: <span class="number">0.5</span>,  <span class="comment">//0-1之间的数值，定义自动剪裁区域的大小，默认0.8</span></span><br><span class="line">    dragCrop: <span class="literal">true</span>,  <span class="comment">//是否允许移除当前的剪裁框，并通过拖动来新建一个剪裁框区域</span></span><br><span class="line">    movable: <span class="literal">true</span>,  <span class="comment">//是否允许移动剪裁框</span></span><br><span class="line">    resizable: <span class="literal">true</span>,  <span class="comment">//是否允许改变裁剪框的大小</span></span><br><span class="line">    zoomable: <span class="literal">false</span>,  <span class="comment">//是否允许缩放图片大小</span></span><br><span class="line">    mouseWheelZoom: <span class="literal">false</span>,  <span class="comment">//是否允许通过鼠标滚轮来缩放图片</span></span><br><span class="line">    touchDragZoom: <span class="literal">false</span>,  <span class="comment">//是否允许通过触摸移动来缩放图片</span></span><br><span class="line">    rotatable: <span class="literal">false</span>,  <span class="comment">//是否允许旋转图片</span></span><br><span class="line">    minContainerWidth: <span class="number">200</span>,  <span class="comment">//容器的最小宽度</span></span><br><span class="line">    minContainerHeight: <span class="number">200</span>,  <span class="comment">//容器的最小高度</span></span><br><span class="line">    minCanvasWidth: <span class="number">0</span>,  <span class="comment">//canvas 的最小宽度（image wrapper）</span></span><br><span class="line">    minCanvasHeight: <span class="number">0</span>,  <span class="comment">//canvas 的最小高度（image wrapper）</span></span><br><span class="line">    strict: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后就是图片这部分最核心的裁剪部分了，但是使用cropper裁剪出来的图片是<code>canvas</code>，解决的方法是将<code>canvas</code>使用<code>toDataURL()</code>方法转化为<code>base64</code>之后再转为<code>img</code>对象，用于后面的操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cropper</span>(<span class="params">photo, options</span>) </span>&#123;<span class="comment">//图片裁剪</span></span><br><span class="line">    <span class="keyword">var</span> cropper = <span class="keyword">new</span> Cropper(photo, options);</span><br><span class="line">    $(<span class="string">'#crop'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        imgResult = cropper.getCroppedCanvas().toDataURL();<span class="comment">//裁剪出来的base64</span></span><br><span class="line">        imgResultImg.src = imgResult;<span class="comment">//裁剪出来的图片对象</span></span><br><span class="line">        $(<span class="string">'.img'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">        LInit(<span class="number">60</span>, <span class="string">"myGame"</span>, gameWidth, gameHeight, main);<span class="comment">//游戏初始化</span></span><br><span class="line">        $(<span class="string">'.game'</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样子图片处理部分就完成了，在图片裁剪完成之后就开始初始化游戏了。</p><h3 id="4-游戏部分"><a href="#4-游戏部分" class="headerlink" title="4.游戏部分"></a>4.游戏部分</h3><p>接下来就开始游戏部分的制作，游戏中大致思路模仿了<a href="https://blog.csdn.net/yorhomwang/article/details/52133498" target="_blank" rel="noopener">《速度挑战 - 2小时完成HTML5拼图小游戏》</a>，在其基础上做了修改</p><h4 id="4-1-定义变量"><a href="#4-1-定义变量" class="headerlink" title="4.1 定义变量"></a>4.1 定义变量</h4><p>首先还是要定义游戏中需要用到的变量：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 初始化游戏 */</span></span><br><span class="line"><span class="keyword">var</span> gameWidth = <span class="number">390</span>;</span><br><span class="line"><span class="keyword">var</span> gameHeight = <span class="number">390</span>;</span><br><span class="line"><span class="comment">/** 游戏层 */</span></span><br><span class="line"><span class="keyword">var</span> stageLayer, gameLayer, overLayer;</span><br><span class="line"><span class="comment">/** 拼图块列表 */</span></span><br><span class="line"><span class="keyword">var</span> blockList;</span><br><span class="line"><span class="comment">/** 是否游戏结束 */</span></span><br><span class="line"><span class="keyword">var</span> isGameOver,</span><br><span class="line">    isTimeOver;</span><br><span class="line"><span class="comment">/** 用时 */</span></span><br><span class="line"><span class="keyword">var</span> startTime, time, countTime;</span><br><span class="line"><span class="comment">/** 步数 */</span></span><br><span class="line"><span class="keyword">var</span> steps;</span><br><span class="line"><span class="comment">/** 图片 */</span></span><br><span class="line"><span class="keyword">var</span> imgBmpd, startNewGame, fail, startBitmap, Again, failBitmap, againBitmap, succeed, succeedBitmap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _blockList = [];<span class="comment">//拼图序列</span></span><br><span class="line"><span class="keyword">var</span> datalist = [];<span class="comment">//存放图片</span></span><br></pre></td></tr></table></figure></p><h4 id="4-2-游戏初始化"><a href="#4-2-游戏初始化" class="headerlink" title="4.2 游戏初始化"></a>4.2 游戏初始化</h4><p>游戏初始化，包括素材的加载，以及游戏界面的显示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;<span class="comment">//游戏资源初始化</span></span><br><span class="line">    <span class="comment">/** 全屏设置 */</span></span><br><span class="line">    <span class="keyword">if</span> (LGlobal.mobile) &#123;</span><br><span class="line">        LGlobal.width = gameWidth;</span><br><span class="line">        LGlobal.height = gameHeight;</span><br><span class="line">        LGlobal.stageScale = LStageScaleMode.SHOW_ALL;</span><br><span class="line">    &#125;</span><br><span class="line">    LGlobal.screen(LGlobal.FULL_SCREEN);</span><br><span class="line">    LGlobal.preventDefault = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 添加加载提示 */</span></span><br><span class="line">    <span class="keyword">var</span> loadingHint = <span class="keyword">new</span> LTextField();</span><br><span class="line">    loadingHint.text = <span class="string">"资源加载中……"</span>;</span><br><span class="line">    loadingHint.size = <span class="number">20</span>;</span><br><span class="line">    loadingHint.x = (LGlobal.width - loadingHint.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    loadingHint.y = (LGlobal.height - loadingHint.getHeight()) / <span class="number">2</span>;</span><br><span class="line">    addChild(loadingHint);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 加载图片 文件*/</span></span><br><span class="line">    LLoadManage.load(</span><br><span class="line">        [</span><br><span class="line">            &#123;<span class="attr">path</span>: <span class="string">"./js/Block.js"</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">"startGame"</span>, <span class="attr">path</span>: <span class="string">"./images/start.png"</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">"fail"</span>, <span class="attr">path</span>: <span class="string">"./images/fail.png"</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">"Again"</span>, <span class="attr">path</span>: <span class="string">"./images/challengeAgain.png"</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">"succeed"</span>, <span class="attr">path</span>: <span class="string">"./images/succeed.png"</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="comment">/** 移除加载提示 */</span></span><br><span class="line">            loadingHint.remove();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 保存位图数据，方便后续使用 */</span></span><br><span class="line">            imgBmpd = <span class="keyword">new</span> LBitmapData(imgResultImg);</span><br><span class="line"></span><br><span class="line">            gameInit(result);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gameInit</span>(<span class="params">e</span>) </span>&#123;<span class="comment">//游戏内容初始化</span></span><br><span class="line">    datalist = e;</span><br><span class="line">    <span class="keyword">var</span> bitmapData = <span class="keyword">new</span> LBitmapData(imgResultImg);</span><br><span class="line">    <span class="keyword">var</span> bitmap = <span class="keyword">new</span> LBitmap(bitmapData);</span><br><span class="line"></span><br><span class="line">    bitmap.scaleX = LGlobal.width / bitmap.width;</span><br><span class="line">    bitmap.scaleY = LGlobal.height / bitmap.height;</span><br><span class="line">    bitmap.width = LGlobal.width;</span><br><span class="line">    bitmap.height = LGlobal.height;</span><br><span class="line">    bitmap.x = <span class="number">0</span>;</span><br><span class="line">    bitmap.y = <span class="number">0</span>;</span><br><span class="line">    addChild(bitmap);</span><br><span class="line"></span><br><span class="line">    startNewGame = <span class="keyword">new</span> LBitmapData(datalist[<span class="string">'startGame'</span>]);</span><br><span class="line">    fail = <span class="keyword">new</span> LBitmapData(datalist[<span class="string">"fail"</span>]);</span><br><span class="line">    Again = <span class="keyword">new</span> LBitmapData(datalist[<span class="string">"Again"</span>]);</span><br><span class="line">    succeed = <span class="keyword">new</span> LBitmapData(datalist[<span class="string">"succeed"</span>]);</span><br><span class="line">    startBitmap = <span class="keyword">new</span> LBitmap(startNewGame);</span><br><span class="line">    failBitmap = <span class="keyword">new</span> LBitmap(fail);</span><br><span class="line">    againBitmap = <span class="keyword">new</span> LBitmap(Again);</span><br><span class="line">    succeedBitmap = <span class="keyword">new</span> LBitmap(succeed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化舞台层 */</span></span><br><span class="line">    stageLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">    stageLayer.graphics.drawRect(<span class="number">0</span>, <span class="string">""</span>, [<span class="number">0</span>, <span class="number">0</span>, LGlobal.width, LGlobal.height], <span class="literal">true</span>, <span class="string">"transparent"</span>);</span><br><span class="line">    addChild(stageLayer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化游戏层 */</span></span><br><span class="line">    gameLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">    stageLayer.addChild(gameLayer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化最上层 */</span></span><br><span class="line">    overLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">    stageLayer.addChild(overLayer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 添加开始界面 */</span></span><br><span class="line">    addBeginningUI();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addBeginningUI</span>(<span class="params"></span>) </span>&#123;<span class="comment">//游戏开始界面</span></span><br><span class="line">    <span class="keyword">var</span> beginningLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">    beginningLayer.graphics.drawRect(<span class="number">0</span>, <span class="string">""</span>, [<span class="number">0</span>, <span class="number">0</span>, LGlobal.width, LGlobal.height], <span class="literal">true</span>, <span class="string">"transparent"</span>);</span><br><span class="line">    stageLayer.addChild(beginningLayer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 游戏标题 */</span></span><br><span class="line">    <span class="keyword">var</span> title = <span class="keyword">new</span> LTextField();</span><br><span class="line">    title.text = <span class="string">"拼图华容道"</span>;</span><br><span class="line">    title.size = <span class="number">48</span>;</span><br><span class="line">    title.weight = <span class="string">"bold"</span>;</span><br><span class="line">    title.x = (LGlobal.width - title.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    title.y = <span class="number">70</span>;</span><br><span class="line">    title.color = <span class="string">"#f8fbb5"</span>;</span><br><span class="line">    title.lineWidth = <span class="number">5</span>;</span><br><span class="line">    title.lineColor = <span class="string">"#000000"</span>;</span><br><span class="line">    title.stroke = <span class="literal">true</span>;</span><br><span class="line">    beginningLayer.addChild(title);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 开始游戏提示 */</span></span><br><span class="line">    startBitmap.scaleX = <span class="number">0.7</span>;</span><br><span class="line">    startBitmap.scaleY = <span class="number">0.7</span>;</span><br><span class="line">    startBitmap.x = (LGlobal.width - startBitmap.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    startBitmap.y = <span class="number">250</span> + <span class="number">0</span>;</span><br><span class="line">    beginningLayer.addChild(startBitmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化拼图块列表 */</span></span><br><span class="line">    initBlockList();</span><br><span class="line">    <span class="comment">/** 打乱拼图 */</span></span><br><span class="line">    getRandomBlockList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 开始游戏 */</span></span><br><span class="line">    beginningLayer.addEventListener(LMouseEvent.MOUSE_UP, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        beginningLayer.remove();</span><br><span class="line">        startGame();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-3-游戏主体"><a href="#4-3-游戏主体" class="headerlink" title="4.3 游戏主体"></a>4.3 游戏主体</h4><p>接下来来到了整个游戏最重要的部分，游戏主体的实现，开始以后将拼图打乱，然后进行游戏：</p><h5 id="1-开始游戏"><a href="#1-开始游戏" class="headerlink" title="(1)开始游戏"></a>(1)开始游戏</h5><p>点击界面以后将游戏的各种值初始化，然后开始游戏<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startGame</span>(<span class="params"></span>) </span>&#123;<span class="comment">//开始游戏</span></span><br><span class="line">    isGameOver = <span class="literal">false</span>;</span><br><span class="line">    isTimeOver = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化时间和步数 */</span></span><br><span class="line">    startTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">    countTime = <span class="number">0</span>;</span><br><span class="line">    time = <span class="number">0</span>;</span><br><span class="line">    steps = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 显示拼图 */</span></span><br><span class="line">    showBlock();</span><br><span class="line">    <span class="comment">/** 计时 */</span></span><br><span class="line">    updateTimeTxt(countTime);</span><br><span class="line">    <span class="comment">/** 显示步数 */</span></span><br><span class="line">    updateStepsTxt();</span><br><span class="line"></span><br><span class="line">    stageLayer.addEventListener(LEvent.ENTER_FRAME, onFrame);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-显示拼图"><a href="#2-显示拼图" class="headerlink" title="(2)显示拼图"></a>(2)显示拼图</h5><p>显示拼图显然不是一张图，那么就需要拼图块，后面会定义一个类来表示这些拼图块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showBlock</span>(<span class="params"></span>) </span>&#123;<span class="comment">//显示拼图</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = blockList.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = blockList[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 根据序号计算拼图块位置 */</span></span><br><span class="line">        <span class="keyword">var</span> y = (i / <span class="number">3</span>) &gt;&gt;&gt; <span class="number">0</span>, x = i % <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        b.setLocation(x, y);</span><br><span class="line"></span><br><span class="line">        gameLayer.addChild(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-初始化拼图列表"><a href="#3-初始化拼图列表" class="headerlink" title="(3)初始化拼图列表"></a>(3)初始化拼图列表</h5><p>根据序号计算拼图块图片显示位置，将拼图块存放到列表中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initBlockList</span>(<span class="params"></span>) </span>&#123;<span class="comment">//初始化拼图列表</span></span><br><span class="line">    blockList = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="comment">/** 根据序号计算拼图块图片显示位置 */</span></span><br><span class="line">        <span class="keyword">var</span> y = (i / <span class="number">3</span>) &gt;&gt;&gt; <span class="number">0</span>, x = i % <span class="number">3</span>;</span><br><span class="line">        blockList.push(<span class="keyword">new</span> Block(i, x, y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="4-打乱拼图"><a href="#4-打乱拼图" class="headerlink" title="(4)打乱拼图"></a>(4)打乱拼图</h5><p>这里使用的是随机打乱拼图，然后计算序列的倒序和，如果倒序和是奇数，拼图无法完成，需要重新打乱，直到倒序和为偶数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomBlockList</span>(<span class="params"></span>) </span>&#123;<span class="comment">//随机打乱拼图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 随机打乱拼图 */</span></span><br><span class="line">    blockList.sort(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> - <span class="built_in">Math</span>.random();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 计算逆序和 */</span></span><br><span class="line">    <span class="keyword">var</span> reverseAmount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = blockList.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentBlock = blockList[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; l; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> comparedBlock = blockList[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (comparedBlock.index &lt; currentBlock.index) &#123;</span><br><span class="line">                reverseAmount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 检测打乱后是否可还原 */</span></span><br><span class="line">    <span class="keyword">if</span> (reverseAmount % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/** 不合格，重新打乱 */</span></span><br><span class="line">        getRandomBlockList();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; blockList.length; i++) &#123;</span><br><span class="line">            str = str + blockList[i].index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(str);</span><br><span class="line">        <span class="keyword">if</span> (str.substr(<span class="number">0</span>, <span class="number">3</span>) == <span class="string">"012"</span>) &#123;</span><br><span class="line">            getRandomBlockList();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _blockList.push(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-4-拼图块"><a href="#4-4-拼图块" class="headerlink" title="4.4 拼图块"></a>4.4 拼图块</h4><p>在拼图过程中，引入了一个新的<code>Block</code>类，这个类用来表示并且操作拼图块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Block</span>(<span class="params">index, x, y</span>) </span>&#123;</span><br><span class="line">    LExtends(<span class="keyword">this</span>, LSprite, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bmpd = imgBmpd.clone();</span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">8</span>) &#123;</span><br><span class="line">        bmpd.setProperties(x * bmpd.width / <span class="number">3</span>, y * bmpd.width / <span class="number">3</span>, bmpd.width / <span class="number">3</span>, bmpd.width / <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">this</span>.bmp = <span class="keyword">new</span> LBitmap(bmpd);</span><br><span class="line">        <span class="keyword">this</span>.bmp.scaleX = <span class="number">130</span> / <span class="keyword">this</span>.bmp.width;</span><br><span class="line">        <span class="keyword">this</span>.bmp.scaleY = <span class="number">130</span> / <span class="keyword">this</span>.bmp.height;</span><br><span class="line">        <span class="keyword">this</span>.addChild(<span class="keyword">this</span>.bmp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> shape = <span class="keyword">new</span> LShape();</span><br><span class="line">        shape.graphics.drawRect(<span class="number">2</span>, <span class="string">"#ffffff"</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">130</span>, <span class="number">130</span>], <span class="literal">true</span>, <span class="string">"#ffffff"</span>);</span><br><span class="line">        <span class="keyword">this</span>.addChild(shape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 格子边框</span></span><br><span class="line">    <span class="keyword">var</span> border = <span class="keyword">new</span> LShape();</span><br><span class="line">    border.graphics.drawRect(<span class="number">3</span>, <span class="string">"#ffffff"</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">130</span>, <span class="number">130</span>]);</span><br><span class="line">    border.graphics.drawRoundRect(<span class="number">3</span>, <span class="string">"#ffffff"</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">130</span>, <span class="number">130</span>, <span class="number">10</span>]);</span><br><span class="line">    <span class="keyword">this</span>.addChild(border);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.index = index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.addEventListener(LMouseEvent.MOUSE_UP, <span class="keyword">this</span>.onClick);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Block.getBlock = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> blockList[y * <span class="number">3</span> + x];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Block.isGameOver = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reductionAmount = <span class="number">0</span>, l = blockList.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 计算还原度 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = blockList[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b.index == i) &#123;</span><br><span class="line">            reductionAmount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 计算是否完全还原 */</span></span><br><span class="line">    <span class="keyword">if</span> (reductionAmount == l) &#123;</span><br><span class="line">        <span class="comment">/** 游戏结束 */</span></span><br><span class="line">        gameOver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Block.exchangePosition = <span class="function"><span class="keyword">function</span> (<span class="params">b1, b2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b1x = b1.locationX, b1y = b1.locationY,</span><br><span class="line">        b2x = b2.locationX, b2y = b2.locationY,</span><br><span class="line">        b1Index = b1y * <span class="number">3</span> + b1x,</span><br><span class="line">        b2Index = b2y * <span class="number">3</span> + b2x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在地图块数组中交换两者位置 */</span></span><br><span class="line">    blockList.splice(b1Index, <span class="number">1</span>, b2);</span><br><span class="line">    blockList.splice(b2Index, <span class="number">1</span>, b1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 交换两者显示位置 */</span></span><br><span class="line">    b1.setLocation(b2x, b2y);</span><br><span class="line">    b2.setLocation(b1x, b1y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 判断游戏是否结束 */</span></span><br><span class="line">    Block.isGameOver();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Block.prototype.setLocation = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;<span class="comment">//方块位置</span></span><br><span class="line">    <span class="keyword">this</span>.locationX = x;</span><br><span class="line">    <span class="keyword">this</span>.locationY = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.x = x * <span class="number">130</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = y * <span class="number">130</span> + <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Block.prototype.onClick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="comment">//方块的点击事件</span></span><br><span class="line">    <span class="keyword">var</span> self = e.currentTarget;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isGameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> checkList = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 判断右侧是否有方块 */</span></span><br><span class="line">    <span class="keyword">if</span> (self.locationX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        checkList.push(Block.getBlock(self.locationX - <span class="number">1</span>, self.locationY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 判断左侧是否有方块 */</span></span><br><span class="line">    <span class="keyword">if</span> (self.locationX &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        checkList.push(Block.getBlock(self.locationX + <span class="number">1</span>, self.locationY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 判断上方是否有方块 */</span></span><br><span class="line">    <span class="keyword">if</span> (self.locationY &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        checkList.push(Block.getBlock(self.locationX, self.locationY - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 判断下方是否有方块 */</span></span><br><span class="line">    <span class="keyword">if</span> (self.locationY &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        checkList.push(Block.getBlock(self.locationX, self.locationY + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = checkList.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> checkO = checkList[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 判断是否是空白拼图块 */</span></span><br><span class="line">        <span class="keyword">if</span> (checkO.index == <span class="number">8</span>) &#123;</span><br><span class="line">            steps++;</span><br><span class="line">            updateStepsTxt();</span><br><span class="line"></span><br><span class="line">            Block.exchangePosition(self, checkO);</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; blockList.length; i++) &#123;</span><br><span class="line">                str = str + blockList[i].index;</span><br><span class="line">            &#125;</span><br><span class="line">            _blockList.push(str);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="4-5-游戏结束"><a href="#4-5-游戏结束" class="headerlink" title="4.5 游戏结束"></a>4.5 游戏结束</h4><p>添加游戏结束功能，根据拼图完成或者计时结束判断游戏成功或是失败</p><h5 id="1-游戏计时计步"><a href="#1-游戏计时计步" class="headerlink" title="(1)游戏计时计步"></a>(1)游戏计时计步</h5><p>游戏未结束之前更新游戏的时间和步数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onFrame</span>(<span class="params"></span>) </span>&#123;<span class="comment">//计时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isGameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isTimeOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 获取当前时间 */</span></span><br><span class="line">    <span class="keyword">var</span> currentTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 计算使用的时间并更新时间显示 */</span></span><br><span class="line">    time = currentTime - startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (countTime &gt; <span class="number">0</span>) &#123;<span class="comment">// 倒计时</span></span><br><span class="line">        updateTimeTxt();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        timeOver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-更新时间和步数"><a href="#2-更新时间和步数" class="headerlink" title="(2)更新时间和步数"></a>(2)更新时间和步数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTimeTxt</span>(<span class="params"></span>) </span>&#123;<span class="comment">//更新时间</span></span><br><span class="line">    $(<span class="string">'#time'</span>).html(getTimeTxt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimeTxt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line">    countTime = <span class="number">99</span> - <span class="built_in">Math</span>.floor(d / <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> countTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateStepsTxt</span>(<span class="params"></span>) </span>&#123;<span class="comment">//更新步数</span></span><br><span class="line">    $(<span class="string">'#steps'</span>).html(steps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-游戏失败"><a href="#3-游戏失败" class="headerlink" title="(3)游戏失败"></a>(3)游戏失败</h5><p>游戏时间结束后视为游戏失败，弹出游戏失败界面，点击重新开始<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeOver</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 判断时间是否结束 失败</span></span><br><span class="line">    isTimeOver = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> resultLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">    resultLayer.filters = [<span class="keyword">new</span> LDropShadowFilter()];</span><br><span class="line">    resultLayer.graphics.drawRoundRect(<span class="number">3</span>, <span class="string">"#BBBBBB"</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">390</span>, <span class="number">450</span>, <span class="number">5</span>], <span class="literal">true</span>, <span class="string">"rgba(0,0,0,.6)"</span>);</span><br><span class="line">    resultLayer.x = (LGlobal.width - resultLayer.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    resultLayer.y = LGlobal.height / <span class="number">2</span>;</span><br><span class="line">    resultLayer.alpha = <span class="number">0</span>;</span><br><span class="line">    overLayer.addChild(resultLayer);</span><br><span class="line"></span><br><span class="line">    failBitmap.scaleX = <span class="number">0.6</span>;</span><br><span class="line">    failBitmap.scaleY = <span class="number">0.6</span>;</span><br><span class="line">    failBitmap.x = (LGlobal.width - failBitmap.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    failBitmap.y = <span class="number">70</span> + <span class="number">0</span>;</span><br><span class="line">    resultLayer.addChild(failBitmap);</span><br><span class="line"></span><br><span class="line">    againBitmap.scaleX = <span class="number">0.6</span>;</span><br><span class="line">    againBitmap.scaleY = <span class="number">0.6</span>;</span><br><span class="line">    againBitmap.x = (LGlobal.width - againBitmap.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    againBitmap.y = <span class="number">250</span> + <span class="number">0</span>;</span><br><span class="line">    resultLayer.addChild(againBitmap);</span><br><span class="line"></span><br><span class="line">    LTweenLite.to(resultLayer, <span class="number">0.5</span>, &#123;</span><br><span class="line">        alpha: <span class="number">0.7</span>,</span><br><span class="line">        y: (LGlobal.height - resultLayer.getHeight()) / <span class="number">2</span> - <span class="number">15</span>,</span><br><span class="line">        onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">/** 点击界面重新开始游戏 */</span></span><br><span class="line">            stageLayer.addEventListener(LMouseEvent.MOUSE_UP, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                gameLayer.removeAllChild();</span><br><span class="line">                overLayer.removeAllChild();</span><br><span class="line">                stageLayer.removeAllEventListener();</span><br><span class="line">                main();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="4-游戏成功"><a href="#4-游戏成功" class="headerlink" title="(4)游戏成功"></a>(4)游戏成功</h5><p>拼图完成时游戏成功，弹出游戏成功界面，输出游戏用时，步数，分数以及游戏情况的序列，点击重新开始<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gameOver</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 游戏成功</span></span><br><span class="line">    <span class="keyword">let</span> score = <span class="number">99</span> - getTimeTxt(time);</span><br><span class="line">    <span class="keyword">let</span> blockList = _blockList.join(<span class="string">"-"</span>);</span><br><span class="line">    <span class="keyword">let</span> step = steps;</span><br><span class="line">    isGameOver = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用时：'</span> + getTimeTxt(time) + <span class="string">'步数：'</span> + step + <span class="string">'分数：'</span> + score + <span class="string">'序列：'</span> + blockList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> resultLayer = <span class="keyword">new</span> LSprite();</span><br><span class="line">    resultLayer.filters = [<span class="keyword">new</span> LDropShadowFilter()];</span><br><span class="line">    resultLayer.graphics.drawRoundRect(<span class="number">3</span>, <span class="string">"#BBBBBB"</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">390</span>, <span class="number">450</span>, <span class="number">5</span>], <span class="literal">true</span>, <span class="string">"rgba(0,0,0,.6)"</span>);</span><br><span class="line">    resultLayer.x = (LGlobal.width - resultLayer.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    resultLayer.y = LGlobal.height / <span class="number">2</span>;</span><br><span class="line">    resultLayer.alpha = <span class="number">0</span>;</span><br><span class="line">    overLayer.addChild(resultLayer);</span><br><span class="line"></span><br><span class="line">    succeedBitmap.scaleX = <span class="number">0.6</span>;</span><br><span class="line">    succeedBitmap.scaleY = <span class="number">0.6</span>;</span><br><span class="line">    succeedBitmap.x = (LGlobal.width - succeedBitmap.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    succeedBitmap.y = <span class="number">70</span> + <span class="number">0</span>;</span><br><span class="line">    resultLayer.addChild(succeedBitmap);</span><br><span class="line"></span><br><span class="line">    againBitmap.scaleX = <span class="number">0.6</span>;</span><br><span class="line">    againBitmap.scaleY = <span class="number">0.6</span>;</span><br><span class="line">    againBitmap.x = (LGlobal.width - againBitmap.getWidth()) / <span class="number">2</span>;</span><br><span class="line">    againBitmap.y = <span class="number">250</span> + <span class="number">0</span>;</span><br><span class="line">    resultLayer.addChild(againBitmap);</span><br><span class="line"></span><br><span class="line">    LTweenLite.to(resultLayer, <span class="number">0.5</span>, &#123;</span><br><span class="line">        alpha: <span class="number">0.7</span>,</span><br><span class="line">        y: (LGlobal.height - resultLayer.getHeight()) / <span class="number">2</span> - <span class="number">15</span>,</span><br><span class="line">        onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">/** 点击界面重新开始游戏 */</span></span><br><span class="line">            stageLayer.addEventListener(LMouseEvent.MOUSE_UP, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                gameLayer.removeAllChild();</span><br><span class="line">                overLayer.removeAllChild();</span><br><span class="line">                stageLayer.removeAllEventListener();</span><br><span class="line">                main();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="反思和总结"><a href="#反思和总结" class="headerlink" title="反思和总结"></a>反思和总结</h2><h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>终于撸完了这个简单的小游戏，虽然写的毛毛糙糙，很多地方写得也不够好，但是收获肯定是有的，不光是看了文档，学习了大佬们的思路，同时也增长了一些动手能力，虽然代码比较简单，但是只要坚持，日积月累肯定会有收获。</p><h3 id="可优化项"><a href="#可优化项" class="headerlink" title="可优化项"></a>可优化项</h3><p>在写这篇博客的时候，回顾代码就已经满满的槽点了，把可优化项记录下来，以后有空可以尝试去优化：</p><ul><li>1.使用jQuery和原生js两种方式获取dom元素，编码习惯不好，使代码更加混乱</li><li>2.游戏白底界面过于简单</li><li>3.随机打乱拼图，使游戏无法设置多种难度，缺少游戏乐趣</li><li>4.图片裁剪部分布局粗糙使用WeUI来完成</li><li>5.无法保留游戏记录</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天公司要做一个拼图的小游戏，我看到了&lt;a href=&quot;https://blog.csdn.net/yorhomwang/article/details/52133498&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《速度挑战 - 2小时完成HTML5拼图小游戏》&lt;/a&gt;，照着写完了一个小游戏以后，这几天使用&lt;a href=&quot;http://fengyuanchen.github.io/cropper/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cropper&lt;/a&gt;和&lt;a href=&quot;http://lufylegend.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lufylegend&lt;/a&gt;游戏引擎制作了一款简单的可以自定义图片的拼图华容道游戏，该游戏除了实现基本的游戏功能以外，还支持游戏图片上传，剪切，以及图片过大可以进行压缩的功能。&lt;br&gt;
    
    </summary>
    
      <category term="前端的乐趣" scheme="http://chrischen0405.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B9%90%E8%B6%A3/"/>
    
    
      <category term="JavaScript" scheme="http://chrischen0405.github.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://chrischen0405.github.io/tags/jQuery/"/>
    
      <category term="教程" scheme="http://chrischen0405.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="canvas" scheme="http://chrischen0405.github.io/tags/canvas/"/>
    
      <category term="lufylegend" scheme="http://chrischen0405.github.io/tags/lufylegend/"/>
    
      <category term="cropper" scheme="http://chrischen0405.github.io/tags/cropper/"/>
    
      <category term="游戏" scheme="http://chrischen0405.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【长期更新】前端试题整理</title>
    <link href="http://chrischen0405.github.io/2018/10/17/questions/"/>
    <id>http://chrischen0405.github.io/2018/10/17/questions/</id>
    <published>2018-10-17T09:33:38.000Z</published>
    <updated>2022-09-22T07:47:58.249Z</updated>
    
    <content type="html"><![CDATA[<p>有些刷题遇到的题目，怕以后忘记，整理起来可以方便回顾。<br>    <a id="more"></a></p><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="1-下面哪些是HTML5-新增的表单元素"><a href="#1-下面哪些是HTML5-新增的表单元素" class="headerlink" title="1.下面哪些是HTML5 新增的表单元素"></a>1.下面哪些是HTML5 新增的表单元素</h3><p>A.datalist<br>B.optgroup<br>C.output<br>D.legend<br><strong>答案</strong>：A C<br><strong>解析</strong>：<code>datalist</code>元素规定输入域的选项列表。<code>keygen</code>元素的作用是提供一种验证用户的可靠方法。<code>output</code>元素用于不同类型的输出。</p><h3 id="2-HTML5新增的布局标签"><a href="#2-HTML5新增的布局标签" class="headerlink" title="2.HTML5新增的布局标签"></a>2.HTML5新增的布局标签</h3><p><code>header</code>、<code>hgroup</code>、<code>nav</code>、<code>aside</code>、<code>section</code>、<code>article</code>、<code>footer</code>、<code>figure</code>、<code>menu</code></p><h3 id="3-给定下面的-HTML-代码："><a href="#3-给定下面的-HTML-代码：" class="headerlink" title="3.给定下面的 HTML 代码："></a>3.给定下面的 HTML 代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">”wrapper”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”wText”</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span>…<span class="comment">&lt;!--more wText items here --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”wImg”</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span>…<span class="comment">&lt;!--more wImg items here --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”wVideo”</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span>…<span class="comment">&lt;!--more wVideo items here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>怎么能够取得 ”wrapper” 中全部项的集合？<br>A.$(‘#wrapper’).children();<br>B.$(‘#wrapper’).html();<br>C.$(‘#wrapper’).contents();<br>D.$(‘#wrapper’).find(“all”);<br><strong>答案</strong>：C<br><strong>解析</strong>：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(‘#wrapper’).children();  //（只沿着 DOM 树向下遍历单一层级）查询直接的子元素。而不管子元素的子元素。</span><br><span class="line">$(‘#wrapper’).html();  //返回的是dom结构。而不是集合</span><br><span class="line">$(‘#wrapper’).find(“all”);   //并没有all这个元素</span><br></pre></td></tr></table></figure></p><h3 id="4-span标签的width和height分别为多少？"><a href="#4-span标签的width和height分别为多少？" class="headerlink" title="4.span标签的width和height分别为多少？"></a>4.span标签的width和height分别为多少？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”width:400px;height:200px;”</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">”float:left;width:auto;height:100%;”</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">”position:absolute;float:left;width:100px;height:50px;”</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A.width = 0px，height = 0px<br>B.width = 400px，height = 200px<br>C.width = 100px，height = 50px<br>D.width = 0px，height = 200px<br><strong>答案</strong>：D<br><strong>解析</strong>：<code>span</code>标签无法设置宽高，但是<code>float</code>会把浮动元素变成块级元素，<code>span</code>元素继承父元素的<code>height</code>的高度<code>200px</code>，由于i设置为绝对定位会脱离原先的文档流，<code>span</code>元素<code>width</code>设置为<code>auto</code>，所以会变<code>0</code></p><h3 id="5-input属于窗体元素-层级显示比flash、其它元素都高。请判断这句话的正确与否。"><a href="#5-input属于窗体元素-层级显示比flash、其它元素都高。请判断这句话的正确与否。" class="headerlink" title="5.input属于窗体元素,层级显示比flash、其它元素都高。请判断这句话的正确与否。"></a>5.<code>input</code>属于窗体元素,层级显示比<code>flash</code>、其它元素都高。请判断这句话的正确与否。</h3><p>错误，在<code>html</code>中，帧元素（<code>frameset</code>）的优先级最高，表单元素比非表单元素的优先级要高。<br>表单元素包括：文本输入框，密码输入框，单选框，复选框，文本输入域，列表框等等；<br>非表单元素包括：连接（<code>a</code>），<code>div</code>，<code>table</code>，<code>span</code>等。<br>所有的<code>html</code>元素又可以根据其显示分成两类：有窗口元素以及无窗口元素。有窗口元素总是显示在无窗口元素的前面。<br>有窗口元素包括：<code>select</code>元素，<code>object</code>元素，以及<code>frames</code>元素等等。<br>无窗口元素：大部分<code>html</code>元素都是无窗口元素。  </p><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="1-下述有关border-none以及border-0的区别，描述错误的是"><a href="#1-下述有关border-none以及border-0的区别，描述错误的是" class="headerlink" title="1.下述有关border:none以及border:0的区别，描述错误的是"></a>1.下述有关border:none以及border:0的区别，描述错误的是</h3><p>A.border:none表示边框样式无<br>B.border:0表示边框宽度为0<br>C.当定义了border:none，即隐藏了边框的显示，实际就是边框宽度为0<br>D.当定义边框时，仅设置边框宽度也可以达到显示的效果<br><strong>答案</strong>：C,D<br><strong>解析</strong>：<br>C:当定义border:none时，表示无边框样式，浏览器并不会对边框进行渲染，也就没有实际的宽度；<br>D:定义边框时，除了设置宽度外，还必须设置边框的样式才能显示出来。</p><h3 id="2-下面哪条声明能固定背景图片"><a href="#2-下面哪条声明能固定背景图片" class="headerlink" title="2.下面哪条声明能固定背景图片"></a>2.下面哪条声明能固定背景图片</h3><p>A.background-attachment:fixed;<br>B.background-attachment:scroll;<br>C.background-origin: initial;<br>D.background-clip: initial;<br><strong>答案</strong>：A<br><strong>解析</strong>：  </p><ul><li><code>background-attachment</code>有三个值：<br><code>scroll</code>是默认值，背景图像会随着页面其余部分的滚动而移动。<br><code>fixed</code>当页面的其余部分滚动时，背景图像不会移动。<br><code>inherit</code>规定应该从父元素继承<code>background-attachment</code>属性的设置。</li><li><code>background-origin</code>属性规定<code>background-position</code>属性相对于什么位置来定位。</li><li><code>background-clip</code>属性规定背景的绘制区域。</li></ul><h3 id="3-重绘与回流的区别"><a href="#3-重绘与回流的区别" class="headerlink" title="3.重绘与回流的区别"></a>3.重绘与回流的区别</h3><p><strong>解析</strong>：</p><ul><li>repaint(重绘) ，<code>repaint</code>发生更改时，元素的外观被改变，且在<strong>没有改变布局</strong>的情况下发生，如改变<code>outline</code>,<code>visibility</code>,<code>background color</code>，不会影响到dom结构渲染。</li><li>reflow(回流)，与<code>repaint</code>区别就是他会<strong>影响到dom的结构渲染</strong>，同时他会触发<code>repaint</code>，他会改变他本身与所有父辈元素(祖先)，这种开销是非常昂贵的，导致性能下降是必然的，页面元素越多效果越明显。<h3 id="4-盒子模型"><a href="#4-盒子模型" class="headerlink" title="4.盒子模型"></a>4.盒子模型</h3><strong>解析</strong>：<br>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容：</li><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。<br>盒子模型分为普通盒子模型和怪异盒子模型，大多数浏览器的元素内容占据的空间是由<code>width</code>属性设置的，而内容周围的<code>padding</code>和<code>border</code>值是另外计算的。然而<code>IE 5</code>和<code>IE 6</code>的呈现却是不正确的。它们在怪异模式中使用自己的非标准模型，浏览器中元素的<code>width</code>属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1-下列js可以让一个input的背景颜色变成红色的是"><a href="#1-下列js可以让一个input的背景颜色变成红色的是" class="headerlink" title="1.下列js可以让一个input的背景颜色变成红色的是"></a>1.下列js可以让一个input的背景颜色变成红色的是</h3><p>A.inputElement.style.backgroundColor = ‘red’;<br>B.inputElement.backgroundColor = ‘red’;<br>C.inputElement.style.backgroundColor = ‘#0000’;<br>D.inputElement.backgroundColor = ‘#0000’;<br><strong>答案</strong>：A<br><strong>解析</strong>：<br>1.获取元素可以借助<code>document.getElementById()</code>/<code>document.getElementsByTagName()</code>等若干方法，也可以利用层级关系（父子关系、兄弟关系等）。而这一点题目已经直接略过了，它直接给出了该元素的引用名称<code>inputElement</code>。<br>2.通过js来改变元素样式的两个最常见的API为：<code>style</code>、<code>className</code>。使用<code>style</code>接口一次只能改变一个样式，而使用<code>className</code>则可以同时改变多个样式，当然前提是已经用css定义该类名的相关样式。<br>3.backgroundColor? background-color?<br>在使用点运算符时，浏览器看到<code>-</code>就没法正确解析了，在那种情况下，只能将该变量使用驼峰命名法来表示。而使用方括号表示法，<code>-</code>被理解为字符串中的内容，该字符串能被正确解析。<br>eg:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputElement.style.backgroundColor = <span class="string">'red'</span>; <span class="comment">// 这是没问题的</span></span><br><span class="line">inputElement.style.background-color = <span class="string">'red'</span>; <span class="comment">// 这是错的</span></span><br><span class="line">inputElement.style[<span class="string">"background-color"</span>] = <span class="string">'red'</span>; <span class="comment">// 这也是可以的</span></span><br></pre></td></tr></table></figure></p><p>4.表示红色有若干种方法:  </p><ul><li>颜色名：red</li><li>百分数：rgb(100%, 0%, 0%)</li><li>数值：rgb(255, 0, 0)</li><li>十六进制：#FF0000</li><li>简写的十六进制：#F00</li></ul><h3 id="2-页面有一个按钮button-id为-button1，通过原生的js如何禁用？-IE-考虑IE-8-0以上版本"><a href="#2-页面有一个按钮button-id为-button1，通过原生的js如何禁用？-IE-考虑IE-8-0以上版本" class="headerlink" title="2.页面有一个按钮button id为 button1，通过原生的js如何禁用？(IE 考虑IE 8.0以上版本)"></a>2.页面有一个按钮button id为 button1，通过原生的js如何禁用？(IE 考虑IE 8.0以上版本)</h3><p>A.document.getElementById(“button1”).readolny= true;<br>B.document.getElementById(“button1”).setAttribute(“readolny”,”true”);<br>C.document.getElementById(“button1”).disabled = true;<br>D.document.getElementById(“button1”).setAttribute(“disabled”,”true”);<br><strong>答案</strong>：C D<br><strong>解析</strong>：<code>disabled</code>和<code>readOnly</code>都是表单的公有属性，<code>readOnly</code>是只读，<code>disabled</code>是禁用。<code>readOnly</code>只针对<code>input(text/password)</code>和<code>textarea</code>有效，而<code>disabled</code>对于所有的表单元素都有效，包括<code>select, radio, checkbox, button</code>等。<br><code>setAttribute</code>在ie7以前是不能通过<code>style</code>和<code>class</code>设置属性的</p><h3 id="3-“1-quot-quot-2-quot-quot-3-quot-map-parseInt-的执行结果是？"><a href="#3-“1-quot-quot-2-quot-quot-3-quot-map-parseInt-的执行结果是？" class="headerlink" title="3.[“1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt)的执行结果是？"></a>3.<code>[“1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt)</code>的执行结果是？</h3><p><strong>答案</strong>：[1, NaN, NaN]<br><strong>解析</strong>：通常使用parseInt时,只需要传递一个参数。但实际上,parseInt可以有两个参数，第二个参数是进制数</p><h3 id="4-下列代码存在几个变量没有被回收？"><a href="#4-下列代码存在几个变量没有被回收？" class="headerlink" title="4.下列代码存在几个变量没有被回收？"></a>4.下列代码存在几个变量没有被回收？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br><span class="line">add();</span><br></pre></td></tr></table></figure><p><strong>答案</strong>：3<br><strong>解析</strong>：<br>变量回收规则：</p><ul><li>全局变量不会被回收。</li><li>局部变量会被回收，也就是函数一旦运行完以后，函数内部的东西都会被销毁。</li><li>只要被另外一个作用域所引用就不会被回收（闭包）</li></ul><p>全局变量不会被回收，但是会被覆盖，所以第一个<code>i</code>被第二个<code>i</code>覆盖了，第二个<code>i</code>没有被回收，变量<code>add</code>被赋值了一个匿名函数，所以也没有被回收。虽然局部变量会被回收，但是<code>add</code>函数中形成了一个闭包，所以里面的变量<code>i</code>也不会被回收。</p><h3 id="5-以下代码的输出结果是"><a href="#5-以下代码的输出结果是" class="headerlink" title="5.以下代码的输出结果是"></a>5.以下代码的输出结果是</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">typeof</span> g();</span><br></pre></td></tr></table></figure><p>A.”number”<br>B.”undefined”<br>C.”function”<br>D.Error<br><strong>答案</strong>：D<br><strong>解析</strong>：<br>js定义函数的方法：<br>1、函数声明：<code>function foo(){...}</code><br>2、函数表达式：<code>var foo = function(){...}</code><br>3、构造函数：<code>var foo = new Function(...)</code><br>除此以外，类似<code>var foo = function bar(){...}</code>这样的定义函数的方法就是第二种函数表达式，在函数外部无法通过<code>bar</code>访问到函数，因为这已经变成了一个表达式。所以<code>g</code>就是<code>undefined</code>，<code>g()</code>就会抛出异常。</p><h3 id="6-javascirpt中的数字在计算机内存储为多少Byte？"><a href="#6-javascirpt中的数字在计算机内存储为多少Byte？" class="headerlink" title="6.javascirpt中的数字在计算机内存储为多少Byte？"></a>6.javascirpt中的数字在计算机内存储为多少Byte？</h3><p>8Byte，Javascript中，由于其变量内容不同，变量被分为基本数据类型变量和引用数据类型变量。基本类型变量用八字节内存，存储基本数据类型(数值、布尔值、null和未定义)的值，引用类型变量则只保存对对象、数组和函数等引用类型的值的引用(即内存地址)。</p><h3 id="7-new-Array-017-输出？"><a href="#7-new-Array-017-输出？" class="headerlink" title="7.+new Array(017)输出？"></a>7.<code>+new Array(017)</code>输出？</h3><p><code>+</code>是一元运算符，无运算效果，但是可以将字符串等转为<code>number</code>类型，<code>017</code>是八进制，故而是<code>Array(15)</code>，这里相当于对于一个未赋值但是长度为15的数组进行<code>number</code>类型转化，其结果为<code>NaN</code></p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="1-常见的浏览器端的存储技术有哪些"><a href="#1-常见的浏览器端的存储技术有哪些" class="headerlink" title="1.常见的浏览器端的存储技术有哪些"></a>1.常见的浏览器端的存储技术有哪些</h3><p>A.cookie<br>B.localStorage<br>C.session<br>D.userData<br><strong>答案</strong>：ABD<br><strong>解析</strong>：cookie 是靠谱的浏览器都支持；localStorge 比 cookie 存的更多，获取更方便，而且存储内容不会随请求发送给服务器；session 虽然需要 cookie 支持（通常存放加密过的 sessionId），但是不在浏览器端存放主要信息，排除；IE 支持 userData 存储数据，但是基本很少使用到，除非有很强的浏览器兼容需求。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="1-HTTP状态码"><a href="#1-HTTP状态码" class="headerlink" title="1.HTTP状态码"></a>1.HTTP状态码</h3><p>常见HTTP状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><p>HTTP状态码分类：</p><ul><li>1**   信息，服务器收到请求，需要请求者继续执行操作</li><li>2**   成功，操作被成功接收并处理</li><li>3**   重定向，需要进一步的操作以完成请求</li><li>4**   客户端错误，请求包含语法错误或无法完成请求</li><li>5**   服务器错误，服务器在处理请求的过程中发生了错误</li></ul><h3 id="2-GET和POST的区别"><a href="#2-GET和POST的区别" class="headerlink" title="2.GET和POST的区别"></a>2.GET和POST的区别</h3><ul><li>（1）GET请求在浏览器回退时是无害的，POST会再次提交请求</li><li>（2）GET请求会被浏览器主动缓存，而POST不会，除非手动设置</li><li>（3）GET请求参数会被完整的保留在浏览器历史记录里，而POST中的参数不会被保留</li><li>（4）GET请求在URL中传递的参数是有长度限制的（不固定，因浏览器决定），而POST没有限制</li><li>（5）GET请求参数通过URL传递，而POST放在request.body上</li><li>（6）GET请求产生的URL地址可以被收藏，而POST不可以</li><li>（7）GET请求只能进行URL编码，而POST支持多种编码方式</li><li>（8）GET请求只接受ASC2字符，而对参数的数据类型POST没有限制</li><li>（9）GET请求比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感数据</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-哪些操作会造成内存泄漏？"><a href="#1-哪些操作会造成内存泄漏？" class="headerlink" title="1.哪些操作会造成内存泄漏？"></a>1.哪些操作会造成内存泄漏？</h3><p>1、闭包引起的内存泄漏；<br>2、意外的全局变量引起的内存泄漏；<br>3、没有清理的DOM元素引起的内存泄漏<br>4、被遗忘的定时器或者回调函数；<br>5、子元素存在引用引起的内存泄漏；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些刷题遇到的题目，怕以后忘记，整理起来可以方便回顾。&lt;br&gt;
    
    </summary>
    
      <category term="刷题ing" scheme="http://chrischen0405.github.io/categories/%E5%88%B7%E9%A2%98ing/"/>
    
    
      <category term="JavaScript" scheme="http://chrischen0405.github.io/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="http://chrischen0405.github.io/tags/HTML5/"/>
    
      <category term="CSS3" scheme="http://chrischen0405.github.io/tags/CSS3/"/>
    
      <category term="前端" scheme="http://chrischen0405.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://chrischen0405.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别接口整理与对比</title>
    <link href="http://chrischen0405.github.io/2018/10/12/post20181012/"/>
    <id>http://chrischen0405.github.io/2018/10/12/post20181012/</id>
    <published>2018-10-12T09:25:14.000Z</published>
    <updated>2022-09-22T07:47:58.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人脸识别主要属性对比"><a href="#人脸识别主要属性对比" class="headerlink" title="人脸识别主要属性对比"></a>人脸识别主要属性对比</h2><table><thead><tr><th style="text-align:left">检测主要属性</th><th style="text-align:center">百度人脸识别</th><th style="text-align:center">face++</th><th style="text-align:center">虹软ArcFace</th><th style="text-align:center">腾讯优图</th></tr></thead><tbody><tr><td style="text-align:left">人脸检测</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">人脸关键点</td><td style="text-align:center">72</td><td style="text-align:center">106</td><td style="text-align:center">×</td><td style="text-align:center">90</td></tr><tr><td style="text-align:left">人脸属性值</td><td style="text-align:center">√</td><td style="text-align:center">beta</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">人脸质量信息</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:left">两张人脸相似度对比</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">活体检测控制</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">人脸搜索</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">new</td></tr><tr><td style="text-align:left">人脸库管理</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">身份验证</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">情绪识别</td><td style="text-align:center">√</td><td style="text-align:center">beta</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">颜值评分</td><td style="text-align:center">√</td><td style="text-align:center">beta</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">肤质评估</td><td style="text-align:center">×</td><td style="text-align:center">beta</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:left">视线估计</td><td style="text-align:center">×</td><td style="text-align:center">beta</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><a id="more"></a><h3 id="主要属性列表"><a href="#主要属性列表" class="headerlink" title="主要属性列表"></a>主要属性列表</h3><ul><li><strong>人脸检测</strong>：检测图片中的人脸并标记出位置信息</li><li><strong>人脸关键点</strong>：展示人脸的核心关键点信息</li><li><strong>人脸属性值</strong>：展示人脸属性信息，如年龄、性别等</li><li><strong>人脸质量信息</strong>：返回人脸各部分的遮挡、光照、模糊、完整度、置信度等信息</li><li><strong>两张人脸相似度对比</strong>：比对两张图片中人脸的相似度，并返回相似度分值</li><li><strong>活体检测控制</strong>：基于图片中的破绽分析，判断其中的人脸是否为二次翻拍（举例：如用户A用手机拍摄了一张包含人脸的图片一，用户B翻拍了图片一得到了图片二，并用图片二伪造成用户A去进行识别操作，这种情况普遍发生在金融开户、实名认证等环节。）</li><li><strong>人脸搜索</strong>：在指定人脸集合中，找到最相似的人脸</li><li><strong>人脸库管理</strong>：构建一个人脸库，用于存放所有人脸特征</li><li><strong>身份验证</strong>：基于姓名和身份证号，调取公民身份证小图（源自公安系统），将当前获取的人脸图片，与此证件小图进行对比，得出比对分数，并基于此进行业务判断是否为同一人。由于公安系统小图，具有最权威的身份证明作用，故对用户本人的验证结果可信度也最为合理。</li><li><strong>情绪识别</strong>：分析检测到的人脸的情绪，并返回置信度分数</li><li><strong>颜值评分</strong>：计算检测到的人脸的颜值分数</li><li><strong>肤质评估</strong>：评估人脸的皮肤健康状况，并能够识别多种常见面部皮肤问题</li><li><strong>视线估计</strong>：对图片中的人眼视线方向进行估计，计算并返回高精度的双眼眼球中心位置坐标，以及双眼视线方向向量</li></ul><h2 id="百度人脸识别"><a href="#百度人脸识别" class="headerlink" title="百度人脸识别"></a>百度人脸识别</h2><p><a href="http://ai.baidu.com/docs#/Face-Detect-V3/top" target="_blank" rel="noopener">官方文档</a></p><p>基于深度学习的人脸识别方案，准确识别图片中的人脸信息，提供人脸属性识别、关键点定位、人脸1：1比对、人脸1：N识别、活体检测等能力</p><h3 id="人脸检测"><a href="#人脸检测" class="headerlink" title="人脸检测"></a>人脸检测</h3><h4 id="接口能力"><a href="#接口能力" class="headerlink" title="接口能力"></a>接口能力</h4><ul><li><strong>人脸检测</strong>：检测图片中的人脸并标记出位置信息</li><li><strong>人脸关键点</strong>：展示人脸的核心关键点信息</li><li><strong>人脸属性值</strong>：展示人脸属性信息，如年龄、性别等</li><li><strong>人脸质量信息</strong>：返回人脸各部分的遮挡、光照、模糊、完整度、置信度等信息<h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4>参考百度的<a href="http://ai.baidu.com/docs#/Face-Detect-V3/5875a6ec" target="_blank" rel="noopener">官方文档</a><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4></li><li>可通过后台的<code>API Key</code>和<code>Secret Key</code>生成<code>access_token</code>，向API服务地址使用POST发送请求，必须在URL中带上参数<code>access_token</code>，<strong><code>access_token</code>的有效期为30天</strong></li><li>请求的图片需经过<strong>Base64编码</strong></li><li>图片支持PNG、JPG、JPEG、BMP，<strong>不支持GIF图片</strong><h3 id="人脸对比"><a href="#人脸对比" class="headerlink" title="人脸对比"></a>人脸对比</h3><h4 id="接口能力-1"><a href="#接口能力-1" class="headerlink" title="接口能力"></a>接口能力</h4></li><li><strong>两张人脸图片相似度对比</strong>：比对两张图片中人脸的相似度，并返回相似度分值</li><li><strong>多种图片类型</strong>：支持生活照、证件照、身份证芯片照、带网纹照四种类型的人脸对比</li><li><strong>活体检测控制</strong>：基于图片中的破绽分析，判断其中的人脸是否为二次翻拍（举例：如用户A用手机拍摄了一张包含人脸的图片一，用户B翻拍了图片一得到了图片二，并用图片二伪造成用户A去进行识别操作，这种情况普遍发生在金融开户、实名认证等环节。）</li><li><strong>质量检测控制</strong>：分析图片的中人脸的模糊度、角度、光照强度等特征，判断图片质量<h4 id="调用方法-1"><a href="#调用方法-1" class="headerlink" title="调用方法"></a>调用方法</h4>参考百度人脸对比<a href="http://ai.baidu.com/docs#/Face-Match-V3/5e2b3702" target="_blank" rel="noopener">调用方式</a><h4 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h4></li><li>可通过后台的<code>API Key</code>和<code>Secret Key</code>生成<code>access_token</code>，向API服务地址使用POST发送请求，必须在URL中带上参数<code>access_token</code>，<strong><code>access_token</code>的有效期为30天</strong></li><li>请求的图片需经过<strong>Base64编码</strong></li><li>图片支持PNG、JPG、JPEG、BMP，<strong>不支持GIF图片</strong><h3 id="在线活体检测"><a href="#在线活体检测" class="headerlink" title="在线活体检测"></a>在线活体检测</h3><h4 id="接口能力-2"><a href="#接口能力-2" class="headerlink" title="接口能力"></a>接口能力</h4></li><li><strong>人脸基础信息</strong>：包括人脸框位置，人脸空间旋转角度，人脸置信度等信息。</li><li><strong>人脸质量检测</strong>：判断人脸的遮挡、光照、模糊度、完整度等质量信息。可用于判断上传的人脸是否符合标准。</li><li><strong>基于图片的活体检测</strong>：基于单张图片，判断图片中的人脸是否为二次翻拍（举例：如用户A用手机拍摄了一张包含人脸的图片一，用户B翻拍了图片一得到了图片二，并用图片二伪造成用户A去进行识别操作，这种情况普遍发生在金融开户、实名认证等环节）。此能力可用于H5场景下的一些人脸采集场景中，增加人脸注册的安全性和真实性。<h4 id="调用方法-2"><a href="#调用方法-2" class="headerlink" title="调用方法"></a>调用方法</h4>参考百度在线活体检测<a href="http://ai.baidu.com/docs#/Face-Liveness-V3/e8ebb3cf" target="_blank" rel="noopener">调用方式</a><h4 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h4></li><li>可通过后台的<code>API Key</code>和<code>Secret Key</code>生成<code>access_token</code>，向API服务地址使用POST发送请求，必须在URL中带上参数<code>access_token</code>，<strong><code>access_token</code>的有效期为30天</strong></li><li>请求的图片需经过<strong>Base64编码</strong></li><li>图片支持PNG、JPG、JPEG、BMP，<strong>不支持GIF图片</strong><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3>百度人脸识别还有<a href="http://ai.baidu.com/docs#/Face-Search-V3/top" target="_blank" rel="noopener">人脸搜索</a>，<a href="http://ai.baidu.com/docs#/Face-Set-V3/top" target="_blank" rel="noopener">人脸库管理</a>，<a href="http://ai.baidu.com/docs#/Face-PersonVerify-V3/top" target="_blank" rel="noopener">身份验证</a>等功能<h3 id="产品价格"><a href="#产品价格" class="headerlink" title="产品价格"></a>产品价格</h3>人脸识别基础在线服务主要有：人脸检测（含属性识别）、人脸对比、人脸搜索、人脸库管理、在线活体检测。其中人脸库管理服务由多个子接口构成。</li><li><strong>调用量免费</strong>：人脸识别下基础在线API接口调用量免费，无需支付费用即可无限制调用。</li><li><strong>按QPS计费</strong>：免费QPS默认为2，如果您通过百度云的企业认证，基础在线API接口的免费QPS将扩充至10。同时您可以根据业务需求随时购买扩充QPS，QPS可包月购买，也可按天单独购买，灵活多样，适应多场景需求。<strong>注意：同一个账号下多个应用共享接口QPS</strong>。</li></ul><table><thead><tr><th>购买QPS数量</th><th>按月购买</th><th>按天购买</th></tr></thead><tbody><tr><td>0&lt;QPS&lt;=10</td><td>300元/月/QPS</td><td>30元/天/QPS</td></tr><tr><td>10&lt;QPS&lt;=50</td><td>250元/月/QPS</td><td>25元/天/QPS</td></tr><tr><td>50&lt;QPS&lt;=100</td><td>200元/月/QPS</td><td>20元/天/QPS</td></tr><tr><td>100&lt;QPS</td><td>150元/月/QPS</td><td>15元/天/QPS</td></tr></tbody></table><p>具体定价参考<a href="http://ai.baidu.com/docs#/Face-Pricing/top" target="_blank" rel="noopener">定价文档</a></p><h2 id="face"><a href="#face" class="headerlink" title="face++"></a>face++</h2><p><a href="https://www.megvii.com/" target="_blank" rel="noopener">官网</a></p><h3 id="人脸检测-1"><a href="#人脸检测-1" class="headerlink" title="人脸检测"></a>人脸检测</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>可以检测图片内的所有人脸，对于每个检测出的人脸，会给出其唯一标识<code>face_token</code>，可用于后续的人脸分析、人脸比对等操作。对于正式API Key，支持指定图片的某一区域进行人脸检测。</p><h4 id="调用方法-3"><a href="#调用方法-3" class="headerlink" title="调用方法"></a>调用方法</h4><p><a href="https://console.faceplusplus.com.cn/documents/4888373" target="_blank" rel="noopener">Detect API</a></p><h4 id="注意点-3"><a href="#注意点-3" class="headerlink" title="注意点"></a>注意点</h4><ul><li><strong>图片格式</strong>：JPG(JPEG)，PNG</li><li><code>calculate_all</code>和<code>face_rectangle</code>参数只有正式API Key才能使用，试用API Key无法使用。</li><li><code>face_token</code>：如果您需要将检测出的人脸用于后续的分析、比对等操作，建议将对应的<code>face_token</code>添加到<code>FaceSet</code>中。如果一个<code>face_token</code>在72小时内没有存放在任一<code>FaceSet</code>中，则该<code>face_token</code>将会失效。如果对同一张图片进行多次人脸检测，同一个人脸得到的<code>face_token</code>是不同的。<h3 id="人脸比对"><a href="#人脸比对" class="headerlink" title="人脸比对"></a>人脸比对</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4>将两个人脸进行比对，来判断是否为同一个人，返回比对结果置信度和不同误识率下的阈值。支持传入图片或 face_token 进行比对。使用图片时会自动选取图片中检测到人脸尺寸最大的一个人脸。<h4 id="调用方法-4"><a href="#调用方法-4" class="headerlink" title="调用方法"></a>调用方法</h4><a href="https://console.faceplusplus.com.cn/documents/4887586" target="_blank" rel="noopener">Compare API</a><h4 id="注意点-4"><a href="#注意点-4" class="headerlink" title="注意点"></a>注意点</h4></li><li><strong>图片格式</strong>：JPG(JPEG)，PNG</li><li><code>face_rectangle1</code>和<code>face_rectangle2</code>参数只有正式API Key可以使用，试用API Key无法使用。<h3 id="人脸搜索"><a href="#人脸搜索" class="headerlink" title="人脸搜索"></a>人脸搜索</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4>在一个已有的<code>FaceSet</code>中找出与目标人脸最相似的一张或多张人脸，返回置信度和不同误识率下的阈值。支持传入图片或<code>face_token</code>进行人脸搜索。使用图片进行搜索时会选取图片中检测到人脸尺寸最大的一个人脸。<h4 id="调用方法-5"><a href="#调用方法-5" class="headerlink" title="调用方法"></a>调用方法</h4><a href="https://console.faceplusplus.com.cn/documents/4888381" target="_blank" rel="noopener">Search API</a><h4 id="注意点-5"><a href="#注意点-5" class="headerlink" title="注意点"></a>注意点</h4></li><li><strong>图片格式</strong>：JPG(JPEG)，PNG</li><li><code>face_rectangle</code>参数只有正式API Key可以使用，试用API Key无法使用。<h3 id="其他功能-1"><a href="#其他功能-1" class="headerlink" title="其他功能"></a>其他功能</h3><a href="https://console.faceplusplus.com.cn/documents/4888397" target="_blank" rel="noopener">FaceSet</a>，<a href="https://console.faceplusplus.com.cn/documents/4888387" target="_blank" rel="noopener">Face</a>，<a href="https://www.faceplusplus.com.cn/beauty/" target="_blank" rel="noopener">颜值评分</a>，<a href="https://www.faceplusplus.com.cn/emotion-recognition/" target="_blank" rel="noopener">情绪识别</a>，<a href="https://www.faceplusplus.com.cn/skinstatus-evaluation/" target="_blank" rel="noopener">肤质评估</a>，<a href="https://www.faceplusplus.com.cn/gaze-estimation/" target="_blank" rel="noopener">视线估计</a><h3 id="产品价格-1"><a href="#产品价格-1" class="headerlink" title="产品价格"></a>产品价格</h3><strong>所有API可免费调用</strong>，同时可根据<strong>“您的业务按量”</strong>或<strong>“按QPS”</strong>灵活升级付费服务；还有多种SDK授权方案可供选择。</li></ul><table><thead><tr><th>付费类型</th><th>价格</th><th>QPS保障</th><th>方案特点</th></tr></thead><tbody><tr><td>按调用量计算</td><td>0.0005-0.01元/次</td><td>最低保障10QPS</td><td>1.提前充值，按次计算费用，调用及储存数量不设上限<br>2.保障QPS稳定性与SLA<br>3.技术支持及售前服务</td></tr><tr><td>按QPS包时计费</td><td>100元/QPS/天<br>1000元/QPS/月（30天）</td><td>保障购买的QPS配额</td><td>1. 购买时段内不限调用量<br>2. 保障QPS稳定性与SLA<br>3. 技术支持及售前服务</td></tr></tbody></table><p>具体定价参考<a href="https://www.faceplusplus.com.cn/v2/pricing/" target="_blank" rel="noopener">定价文档</a></p><h2 id="虹软ArcFace"><a href="#虹软ArcFace" class="headerlink" title="虹软ArcFace"></a>虹软ArcFace</h2><p><a href="https://ai.arcsoft.com.cn/product/arcface.html" target="_blank" rel="noopener">虹软AI开放平台</a></p><h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><p><a href="https://ai.arcsoft.com.cn/manual/index" target="_blank" rel="noopener">API文档</a></p><h3 id="人脸检测-2"><a href="#人脸检测-2" class="headerlink" title="人脸检测"></a>人脸检测</h3><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><p>使用虹软人脸引擎，能够帮助您检测并且定位到影像（图片或者视频）中的人脸。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>虹软的人脸检测技术支持强光、弱光、黑夜、背光等多种复杂环境。<br>并且可检测出正脸，侧脸等多种角度人脸的位置。</p><h4 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h4><p>Windows平台，linux平台，Android平台，iOS平台</p><h3 id="人脸比对-1"><a href="#人脸比对-1" class="headerlink" title="人脸比对"></a>人脸比对</h3><h4 id="功能介绍-1"><a href="#功能介绍-1" class="headerlink" title="功能介绍"></a>功能介绍</h4><p>人脸比对通过将两张人脸提取出特征码，再计算两张人脸的相似度，并且给出相应的相似比值，从而判断两张人脸是否为同一个人。</p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><p>虹软一直积极地专注于提高成功率，同时保持低误检率。在大角度或不同角度下，低光背光环境下，人脸移动或不同表情下，因年纪增长像貌变化，少量遮挡，设备移动等等情况下，都有业界领先的识别率。</p><h4 id="支持平台-1"><a href="#支持平台-1" class="headerlink" title="支持平台"></a>支持平台</h4><p>Windows平台，linux平台，Android平台，iOS平台</p><h3 id="人脸查找"><a href="#人脸查找" class="headerlink" title="人脸查找"></a>人脸查找</h3><h4 id="功能介绍-2"><a href="#功能介绍-2" class="headerlink" title="功能介绍"></a>功能介绍</h4><p>人脸查找是从人脸库中寻找到与待识别人脸相似的一张脸或者多张脸。<br>一般是提取出待识别人脸的特征码，在通过特征码与人脸库中的进行比对。</p><h4 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h4><p>虹软提供不同场景下的人脸识别SDK，支持离线端、多线程的比对方式，可根据开发者自己的应用场景灵活实现人脸查找功能。</p><h4 id="支持平台-2"><a href="#支持平台-2" class="headerlink" title="支持平台"></a>支持平台</h4><p>Windows平台，Android平台</p><h3 id="活体检测"><a href="#活体检测" class="headerlink" title="活体检测"></a>活体检测</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>活体检测离线SDK，包含单目RGB静默活体检测能力</p><h4 id="支持平台-3"><a href="#支持平台-3" class="headerlink" title="支持平台"></a>支持平台</h4><p>Android平台</p><h3 id="产品价格-2"><a href="#产品价格-2" class="headerlink" title="产品价格"></a>产品价格</h3><ul><li>没有使用限制，支持商用。</li><li>永久免费的，人脸识别SDK可以免费下载使用和更新升级，可放心使用。</li><li>不需要签订授权书，根据注册时阅读的《虹软公司（ArcSoft）人工智能开放平台服务协议》中的说明，使用者需尊重虹软的知识产权，故在产品的显著位置正确且完整地标注“Powered by ArcSoft”或“技术由虹软公司（ArcSoft）提供”的字样即可。<h2 id="腾讯优图"><a href="#腾讯优图" class="headerlink" title="腾讯优图"></a>腾讯优图</h2><h3 id="人脸检测与分析"><a href="#人脸检测与分析" class="headerlink" title="人脸检测与分析"></a>人脸检测与分析</h3><a href="https://open.youtu.qq.com/#/open/experience/detection" target="_blank" rel="noopener">技术体验中心</a><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4>检测图片内的人脸，返回人脸的位置和性别、年龄等属性<h4 id="调用方法-6"><a href="#调用方法-6" class="headerlink" title="调用方法"></a>调用方法</h4><a href="https://open.youtu.qq.com/legency/#/develop/api-face-analysis-detect" target="_blank" rel="noopener">API文档</a><h3 id="人脸验证"><a href="#人脸验证" class="headerlink" title="人脸验证"></a>人脸验证</h3><a href="https://open.youtu.qq.com/legency/#/face-verification" target="_blank" rel="noopener">技术体验中心</a><h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4>核对两张脸是否属于同一个人，并给出相似度评分<h4 id="调用方法-7"><a href="#调用方法-7" class="headerlink" title="调用方法"></a>调用方法</h4><a href="https://open.youtu.qq.com/legency/#/develop/api-face-identify-verify" target="_blank" rel="noopener">API文档</a><h3 id="人脸检索"><a href="#人脸检索" class="headerlink" title="人脸检索"></a>人脸检索</h3><a href="https://open.youtu.qq.com/#/open/experience/retrieval" target="_blank" rel="noopener">技术体验中心</a><h4 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h4>在人脸图片集合中搜索长相相似的人脸<h4 id="调用方法-8"><a href="#调用方法-8" class="headerlink" title="调用方法"></a>调用方法</h4><a href="https://open.youtu.qq.com/legency/#/develop/api-face-identify-multiidentify" target="_blank" rel="noopener">API文档</a><h3 id="人脸关键点定位与跟踪"><a href="#人脸关键点定位与跟踪" class="headerlink" title="人脸关键点定位与跟踪"></a>人脸关键点定位与跟踪</h3><a href="https://open.youtu.qq.com/#/open/experience/points" target="_blank" rel="noopener">技术体验中心</a><h4 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h4>精确定位和跟踪面部的关键区域位置<h4 id="调用方法-9"><a href="#调用方法-9" class="headerlink" title="调用方法"></a>调用方法</h4><a href="https://open.youtu.qq.com/legency/#/develop/api-face-analysis-shape" target="_blank" rel="noopener">API文档</a><h3 id="产品价格-3"><a href="#产品价格-3" class="headerlink" title="产品价格"></a>产品价格</h3>人脸识别按照月接口调用量采取阶梯到达计费方式，当月总量在哪个阶梯内，则按该阶梯单价计费，接口调用量越大，单价越低。</li></ul><table><thead><tr><th>月接口调用总量</th><th>人脸检测与分析</th><th>五官定位</th><th>人脸比对</th><th>人脸验证</th><th>人脸检索</th></tr></thead><tbody><tr><td>计费接口</td><td>人脸检测与分析</td><td>五官定位</td><td>人脸比对</td><td>个体创建<br>增加人脸<br>人脸验证</td><td>个体创建<br>增加人脸<br>人脸检索</td></tr><tr><td>0-300万</td><td>0.0005元/张</td><td>0.002元/张</td><td>0.0032元/张</td><td>0.0032元/张</td><td>0.0032元/张</td></tr><tr><td>300万-1500万</td><td>0.0004元/张</td><td>0.0018元/张</td><td>0.003元/张</td><td>0.003元/张</td><td>0.003元/张</td></tr><tr><td>1500万以上</td><td>0.0003元/张</td><td>0.0015元/张</td><td>0.0027元/张</td><td>0.0027元/张</td><td>0.0027元/张</td></tr></tbody></table><p>具体定价参考<a href="https://open.youtu.qq.com/legency/#/develop/new-platform" target="_blank" rel="noopener">产品定价</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人脸识别主要属性对比&quot;&gt;&lt;a href=&quot;#人脸识别主要属性对比&quot; class=&quot;headerlink&quot; title=&quot;人脸识别主要属性对比&quot;&gt;&lt;/a&gt;人脸识别主要属性对比&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;检测主要属性&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;百度人脸识别&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;face++&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;虹软ArcFace&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;腾讯优图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;人脸检测&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;人脸关键点&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;72&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;106&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;人脸属性值&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;beta&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;人脸质量信息&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;两张人脸相似度对比&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;活体检测控制&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;人脸搜索&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;人脸库管理&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;身份验证&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;情绪识别&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;beta&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;颜值评分&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;beta&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;肤质评估&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;beta&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;视线估计&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;beta&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="测试" scheme="http://chrischen0405.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="API测试" scheme="http://chrischen0405.github.io/tags/API%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>canvas实现扭蛋机动画效果</title>
    <link href="http://chrischen0405.github.io/2018/10/10/post20181010/"/>
    <id>http://chrischen0405.github.io/2018/10/10/post20181010/</id>
    <published>2018-10-10T07:55:56.000Z</published>
    <updated>2022-09-22T07:47:58.221Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间，已经实习了两个月了，公司每个月都有个会员日的活动要做，这个月的任务是做一个扭蛋机抽奖的活动，数据什么的都有接口，那么前端剩下最大的任务就只剩下扭蛋机的动画实现了。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本来兴高采烈地从网上找了一个扭蛋机动画，但是发现它是直接用css动画，把扭蛋们的动画写死了，这样我不是很喜欢，于是还是选择用<code>canvas</code>绘制扭蛋的随机动画。先写了个简单的扭蛋机Demo，<a href="https://chrischen0405.github.io/Demo/canvas/canvas%E6%89%AD%E8%9B%8B%E6%9C%BA%E6%95%88%E6%9E%9C/index.html" target="_blank">效果预览</a><br><a id="more"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>扭蛋机的布局比较简单，只需要在基础背景上添加一些元素就可以，最主要的是<code>canvas</code>标签，其他都无所谓：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span>点击抽奖<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lotterybg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"285px"</span> <span class="attr">height</span>=<span class="string">"170px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/lighting.png"</span> <span class="attr">class</span>=<span class="string">"lighting"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/start-btn.png"</span> <span class="attr">id</span>=<span class="string">"start"</span> <span class="attr">onclick</span>=<span class="string">"play()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"award"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"awardBall"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.png"</span> <span class="attr">id</span>=<span class="string">"ball1"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.png"</span> <span class="attr">id</span>=<span class="string">"ball2"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.png"</span> <span class="attr">id</span>=<span class="string">"ball3"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.png"</span> <span class="attr">id</span>=<span class="string">"ball4"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>附上样式表：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;<span class="attribute">border</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.bg</span> &#123;<span class="attribute">background</span>: <span class="built_in">url</span>(../img/bg.png) top no-repeat;<span class="attribute">background-size</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">position</span>: absolute;<span class="attribute">width</span>: <span class="number">400px</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">margin-top</span>: <span class="number">0</span>;<span class="attribute">margin-left</span>: <span class="number">50%</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%);&#125;</span><br><span class="line"><span class="selector-id">#message</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">text-align</span>: center;<span class="attribute">height</span>: <span class="number">25px</span>;<span class="attribute">font-size</span>: <span class="number">22px</span>;<span class="attribute">margin-top</span>: <span class="number">110px</span>;<span class="attribute">margin-left</span>: <span class="number">50%</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%);&#125;</span><br><span class="line"><span class="selector-class">.lotterybg</span> &#123;<span class="attribute">background</span>: <span class="built_in">url</span>(../img/lotterybg.png) top no-repeat;<span class="attribute">background-size</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: visible;<span class="attribute">width</span>: <span class="number">80%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">margin-top</span>: <span class="number">160px</span>;<span class="attribute">margin-left</span>: <span class="number">50%</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%);&#125;</span><br><span class="line"><span class="selector-id">#myCanvas</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">border</span>: none;<span class="attribute">width</span>: <span class="number">285px</span>;<span class="attribute">height</span>: <span class="number">170px</span>;<span class="attribute">margin-top</span>: <span class="number">15px</span>;<span class="attribute">margin-left</span>: <span class="number">50%</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%);&#125;</span><br><span class="line"><span class="selector-class">.lighting</span> &#123;<span class="attribute">display</span>: block;<span class="attribute">max-width</span>: <span class="number">99%</span>;<span class="attribute">margin-top</span>: <span class="number">0</span>;<span class="attribute">margin-left</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-id">#start</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">z-index</span>: <span class="number">3</span>;<span class="attribute">width</span>: <span class="number">202px</span>;<span class="attribute">margin-top</span>: <span class="number">413px</span>;<span class="attribute">margin-left</span>: <span class="number">50%</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%);&#125;</span><br><span class="line"><span class="selector-class">.imgSrc</span> &#123;<span class="attribute">display</span>: none;<span class="attribute">position</span>: absolute;&#125;</span><br><span class="line"><span class="selector-class">.award</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">border</span>: none;<span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">top</span>: <span class="number">470px</span>;<span class="attribute">margin-left</span>: <span class="number">50%</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%);<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%);&#125;</span><br></pre></td></tr></table></figure></p><p>这样子布局就算完成了，接下来主要工作就在<code>canvas</code>绘制图像上了。</p><h3 id="扭蛋动画"><a href="#扭蛋动画" class="headerlink" title="扭蛋动画"></a>扭蛋动画</h3><p>先把各种变量定义好：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'myCanvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> ball1 = <span class="built_in">document</span>.getElementById(<span class="string">'ball1'</span>);<span class="comment">//图片对象</span></span><br><span class="line"><span class="keyword">var</span> ball2 = <span class="built_in">document</span>.getElementById(<span class="string">'ball2'</span>);<span class="comment">//图片对象</span></span><br><span class="line"><span class="keyword">var</span> ball3 = <span class="built_in">document</span>.getElementById(<span class="string">'ball3'</span>);<span class="comment">//图片对象</span></span><br><span class="line"><span class="keyword">var</span> ball4 = <span class="built_in">document</span>.getElementById(<span class="string">'ball4'</span>);<span class="comment">//图片对象</span></span><br><span class="line"><span class="keyword">var</span> ballList = [ball1, ball2, ball3, ball4];<span class="comment">//图片对象数组</span></span><br><span class="line"><span class="keyword">var</span> ballNum = <span class="number">4</span>;<span class="comment">//扭蛋机里面的小球数</span></span><br><span class="line"><span class="keyword">var</span> awardList = [];<span class="comment">//扭蛋机中的小球集合</span></span><br><span class="line"><span class="keyword">var</span> timer;<span class="comment">//计时器</span></span><br><span class="line"><span class="keyword">var</span> award = <span class="built_in">document</span>.getElementById(<span class="string">'awardBall'</span>);</span><br><span class="line"><span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="扭蛋对象"><a href="#扭蛋对象" class="headerlink" title="扭蛋对象"></a>扭蛋对象</h4><p>扭蛋机里面每个扭蛋都是一个对象，所以需要定义一个扭蛋对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params">index, img</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.r = <span class="number">30</span>;<span class="comment">//小球半径</span></span><br><span class="line">    <span class="keyword">this</span>.x = <span class="keyword">this</span>.rand(canvas.width - <span class="keyword">this</span>.r * <span class="number">2</span>);<span class="comment">//小球初始横坐标</span></span><br><span class="line">    <span class="keyword">this</span>.y = <span class="keyword">this</span>.rand(canvas.height - <span class="keyword">this</span>.r * <span class="number">2</span>);<span class="comment">//小球初始纵坐标</span></span><br><span class="line">    <span class="keyword">this</span>.color = index;<span class="comment">//小球颜色，以下标表示</span></span><br><span class="line">    <span class="keyword">this</span>.img = img;<span class="comment">//小球素材</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.speedX = <span class="keyword">this</span>.rand(<span class="number">20</span>) - <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">this</span>.speedX &lt; <span class="number">5</span>);<span class="comment">//小球横坐标改变速度</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.speedY = <span class="keyword">this</span>.rand(<span class="number">20</span>) - <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">this</span>.speedY &lt; <span class="number">5</span>);<span class="comment">//小球纵坐标改变速度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>传入扭蛋对象的值<code>index</code>为小球的颜色，用数字1~4表示，<code>img</code>是图片对象，用来绘制扭蛋。</p><h4 id="扭蛋方法"><a href="#扭蛋方法" class="headerlink" title="扭蛋方法"></a>扭蛋方法</h4><p>在上一步已经为扭蛋添加了属性，接下来就是给扭蛋添加方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Ball.prototype = &#123;</span><br><span class="line">    rand: <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;<span class="comment">//随机数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.random() * num;</span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//小球运动函数</span></span><br><span class="line">        <span class="keyword">this</span>.x += <span class="keyword">this</span>.speedX;</span><br><span class="line">        <span class="keyword">this</span>.y += <span class="keyword">this</span>.speedY;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt; canvas.width - <span class="keyword">this</span>.r * <span class="number">2</span>) &#123;<span class="comment">//小球碰到右边界，横坐标速度变为负</span></span><br><span class="line">            <span class="keyword">this</span>.speedX = -<span class="keyword">this</span>.speedX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; <span class="number">0</span>) &#123;<span class="comment">//小球碰到左边界，横坐标速度变为正</span></span><br><span class="line">            <span class="keyword">this</span>.speedX = <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.speedX);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.y &gt; canvas.height - <span class="keyword">this</span>.r * <span class="number">2</span>) &#123;<span class="comment">//小球碰到下边界，纵坐标速度变为负</span></span><br><span class="line">            <span class="keyword">this</span>.speedY = -<span class="keyword">this</span>.speedY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.y &lt; <span class="number">0</span>) &#123;<span class="comment">//小球碰到上边界，纵坐标速度变为正</span></span><br><span class="line">            <span class="keyword">this</span>.speedY = <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.speedY);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.drawImage(<span class="keyword">this</span>.img, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">60</span>, <span class="number">60</span>);<span class="comment">//绘制小球</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要是为扭蛋对象的原型添加上运动函数，运动函数的作用就是让扭蛋根据其速度动起来，并且在接触到边界的时候反弹。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>接下来就是把扭蛋们放在扭蛋机里面：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ballNum; i++) &#123;<span class="comment">//随机生成各色小球</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">Math</span>.floor(<span class="number">4</span> * <span class="built_in">Math</span>.random());</span><br><span class="line">        awardList[i] = <span class="keyword">new</span> Ball(index, ballList[index]);<span class="comment">//新建小球对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.clearInterval(timer);<span class="comment">//清除计时器</span></span><br><span class="line">    timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);<span class="comment">//清空画布</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; awardList.length; i++) &#123;</span><br><span class="line">            awardList[i].run();</span><br><span class="line">        &#125;<span class="comment">//使小球运动</span></span><br><span class="line">    &#125;, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样子扭蛋机里面就已经有了小球。</p><h4 id="开始扭蛋"><a href="#开始扭蛋" class="headerlink" title="开始扭蛋"></a>开始扭蛋</h4><p>开始扭蛋主要经历的过程就是点击按钮，扭蛋机扭蛋减少，获得相应扭蛋，中奖显示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (awardList.length === <span class="number">0</span>) &#123;<span class="comment">//奖池中没有小球</span></span><br><span class="line">        alert(<span class="string">'重新开始！'</span>);</span><br><span class="line">        init();</span><br><span class="line">        message.innerText = <span class="string">'点击抽奖'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.clearInterval(timer);<span class="comment">//清除计时器</span></span><br><span class="line">        <span class="keyword">let</span> r = awardList.pop();<span class="comment">//将奖池中的小球减少</span></span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);<span class="comment">//清空画布</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; awardList.length; i++) &#123;</span><br><span class="line">                awardList[i].run();</span><br><span class="line">            &#125;<span class="comment">//使小球运动</span></span><br><span class="line">        &#125;, <span class="number">15</span>);</span><br><span class="line">        <span class="keyword">switch</span> (r.color) &#123;<span class="comment">//小球掉落动画</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                award.setAttribute(<span class="string">'class'</span>, <span class="string">'dropBall1'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                award.setAttribute(<span class="string">'class'</span>, <span class="string">'dropBall2'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                award.setAttribute(<span class="string">'class'</span>, <span class="string">'dropBall3'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                award.setAttribute(<span class="string">'class'</span>, <span class="string">'dropBall4'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//扭蛋成功提示</span></span><br><span class="line">            award.setAttribute(<span class="string">'class'</span>, <span class="string">''</span>);</span><br><span class="line">            <span class="keyword">switch</span> (r.color) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    message.innerText = <span class="string">'紫球！'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    message.innerText = <span class="string">'绿球！'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    message.innerText = <span class="string">'黄球！'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    message.innerText = <span class="string">'红球！'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里扭蛋的掉落动画使用css动画的关键帧来完成：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropBall1</span> &#123;<span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">60px</span>;<span class="attribute">display</span>: block;<span class="attribute">background</span>: <span class="built_in">url</span>(../img/1.png) no-repeat;<span class="attribute">background-size</span>: contain;<span class="attribute">animation</span>: drop <span class="number">1s</span> ease-out forwards;<span class="attribute">-webkit-animation</span>: drop <span class="number">1s</span> ease-out forwards;&#125;</span><br><span class="line"><span class="selector-class">.dropBall2</span> &#123;<span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">60px</span>;<span class="attribute">display</span>: block;<span class="attribute">background</span>: <span class="built_in">url</span>(../img/2.png) no-repeat;<span class="attribute">background-size</span>: contain;<span class="attribute">animation</span>: drop <span class="number">1s</span> ease-out forwards;<span class="attribute">-webkit-animation</span>: drop <span class="number">1s</span> ease-out forwards;&#125;</span><br><span class="line"><span class="selector-class">.dropBall3</span> &#123;<span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">60px</span>;<span class="attribute">display</span>: block;<span class="attribute">background</span>: <span class="built_in">url</span>(../img/3.png) no-repeat;<span class="attribute">background-size</span>: contain;<span class="attribute">animation</span>: drop <span class="number">1s</span> ease-out forwards;<span class="attribute">-webkit-animation</span>: drop <span class="number">1s</span> ease-out forwards;&#125;</span><br><span class="line"><span class="selector-class">.dropBall4</span> &#123;<span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">60px</span>;<span class="attribute">display</span>: block;<span class="attribute">background</span>: <span class="built_in">url</span>(../img/4.png) no-repeat;<span class="attribute">background-size</span>: contain;<span class="attribute">animation</span>: drop <span class="number">1s</span> ease-out forwards;<span class="attribute">-webkit-animation</span>: drop <span class="number">1s</span> ease-out forwards;&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> drop &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.7);</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    51% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0px);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(100px);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> drop &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.7);</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    51% &#123;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(0px);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(100px);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>当然，需要最后加上<code>init();</code>来让扭蛋机跑起来，到这里，这个简单的扭蛋机就算完成了，<a href="https://chrischen0405.github.io/Demo/canvas/canvas%E6%89%AD%E8%9B%8B%E6%9C%BA%E6%95%88%E6%9E%9C/index.html" target="_blank">效果预览</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然这个Demo比较简单，但是还是有一些注意点和一些可优化的地方。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><h4 id="img对象"><a href="#img对象" class="headerlink" title="img对象"></a>img对象</h4><p>在<code>html</code>中的这些<code>img</code>标签：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.png"</span> <span class="attr">id</span>=<span class="string">"ball1"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.png"</span> <span class="attr">id</span>=<span class="string">"ball2"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.png"</span> <span class="attr">id</span>=<span class="string">"ball3"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.png"</span> <span class="attr">id</span>=<span class="string">"ball4"</span> <span class="attr">class</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>样式也写成<code>display: none;</code>，这样写是为了在js中获取<code>img</code>对象，当然也可以不在<code>html</code>中写这些<code>img</code>标签，直接在js文件中写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image(); </span><br><span class="line">img.src = <span class="string">'img/1.png'</span>;</span><br></pre></td></tr></table></figure></p><p>这样子也可以得到<code>img</code>对象，也可以用来绘制扭蛋。</p><h4 id="清除计时器"><a href="#清除计时器" class="headerlink" title="清除计时器"></a>清除计时器</h4><p>代码中清除计时器都是在调用计时器之前，之所以这样做的目的，是因为不清除计时器，计时器会一直计时，导致动画越来越鬼畜。</p><h4 id="画布"><a href="#画布" class="headerlink" title="画布"></a>画布</h4><p>在<code>canvas</code>画布上绘制可能会出现图像不清晰、放大的情况，这种情况可以通过将<code>canvas</code>标签的<code>width</code>和<code>height</code>属性设置成和样式的<code>width</code>和<code>height</code>属性相同来解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼间，已经实习了两个月了，公司每个月都有个会员日的活动要做，这个月的任务是做一个扭蛋机抽奖的活动，数据什么的都有接口，那么前端剩下最大的任务就只剩下扭蛋机的动画实现了。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本来兴高采烈地从网上找了一个扭蛋机动画，但是发现它是直接用css动画，把扭蛋们的动画写死了，这样我不是很喜欢，于是还是选择用&lt;code&gt;canvas&lt;/code&gt;绘制扭蛋的随机动画。先写了个简单的扭蛋机Demo，&lt;a href=&quot;https://chrischen0405.github.io/Demo/canvas/canvas%E6%89%AD%E8%9B%8B%E6%9C%BA%E6%95%88%E6%9E%9C/index.html&quot; target=&quot;_blank&quot;&gt;效果预览&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端的乐趣" scheme="http://chrischen0405.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B9%90%E8%B6%A3/"/>
    
    
      <category term="JavaScript" scheme="http://chrischen0405.github.io/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="http://chrischen0405.github.io/tags/HTML5/"/>
    
      <category term="CSS3" scheme="http://chrischen0405.github.io/tags/CSS3/"/>
    
      <category term="教程" scheme="http://chrischen0405.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="动画" scheme="http://chrischen0405.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="canvas" scheme="http://chrischen0405.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>js中call()和apply()方法的区别和用法详解</title>
    <link href="http://chrischen0405.github.io/2018/09/12/post20180912/"/>
    <id>http://chrischen0405.github.io/2018/09/12/post20180912/</id>
    <published>2018-09-12T09:29:35.000Z</published>
    <updated>2022-09-22T07:47:58.221Z</updated>
    
    <content type="html"><![CDATA[<p>今天又碰到了JacvaScript中的<code>call()</code>和<code>apply()</code>方法，然后看看学学，敲了遍代码，才大概对这两个方法有些了解，这篇博客是对这两个方法的归纳整理。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>每个函数都包含两个非继承而来的方法：<code>call()</code>方法和<code>apply()</code>方法。<br><a id="more"></a><br><code>call</code>和<code>apply</code>可以用来<strong>重新定义函数的执行环境</strong>，也就是<code>this</code>的指向；<code>call</code>和<code>apply</code>都是为了改变某个函数运行时的<code>context</code>，即上下文而存在的，换句话说，就是为了改变函数体内部<code>this</code>的指向。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h4><p>调用一个对象的方法，<strong>用另一个对象替换当前对象</strong>，可以继承另外一个对象的属性，它的语法是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.call(obj[, param1[, param2[, [,...paramN]]]]);</span><br></pre></td></tr></table></figure></p><ul><li><code>obj</code>：这个对象将代替<code>Function</code>类里<code>this</code>对象</li><li><code>params</code>：一串参数列表</li></ul><p><strong>说明</strong>：<code>call</code>方法可以用来代替另一个对象调用一个方法，<code>call</code>方法可以将一个函数的对象上下文从初始的上下文改变为<code>obj</code>指定的新对象，如果没有提供<code>obj</code>参数，那么Global对象被用于<code>obj</code>。</p><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><p>和<code>call()</code>方法一样，只是参数列表不同，语法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.apply(obj[, argArray]);</span><br></pre></td></tr></table></figure></p><ul><li><code>obj</code>：这个对象将代替<code>Function</code>类里<code>this</code>对象  </li><li><code>argArray</code>：这个是数组，它将作为参数传给<code>Function</code></li></ul><p><strong>说明</strong>：如果<code>argArray</code>不是一个有效数组或不是<code>arguments</code>对象，那么将导致一个<code>TypeError</code>，如果没有提供<code>argArray</code>和<code>obj</code>任何一个参数，那么Global对象将用作<code>obj</code>。</p><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p><code>call()</code>和<code>apply()</code>方法的相同点就是这两个方法的作用是一样的。都是在特定的作用域中调用函数，等于设置函数体内<code>this</code>对象的值，以<strong>扩充函数赖以运行的作用域</strong>。</p><p>一般来说，<code>this</code>总是指向调用某个方法的对象，但是使用<code>call()</code>和<code>apply()</code>方法时，就会改变<code>this</code>的指向，看个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add.call(sub, <span class="number">2</span>, <span class="number">1</span>));<span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>为什么<code>add.call(sub, 2, 1)</code>的执行结果是<code>3</code>呢，因为<code>call()</code>方法改变了<code>this</code>的指向，使得<code>sub</code>可以调用<code>add</code>的方法，也就是用<code>sub</code>去执行<code>add</code>中的内容，再来看一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, grade</span>) </span>&#123;</span><br><span class="line">    People.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'小明'</span>, <span class="number">21</span>, <span class="string">'大三'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(student.name + student.age + student.grade);<span class="comment">//小明21大三</span></span><br></pre></td></tr></table></figure></p><p>在这个例子中，我们并没有给<code>Student</code>的<code>name</code>和<code>age</code>赋值，但是存在这两个属性的值，这还是要归功于<code>call()</code>方法，它可以改变<code>this</code>的指向。<br>在这个例子里，<code>People.call(this, name, age);</code>中的<code>this</code>代表的是<code>Student</code>，这也就是之前说的，使得<code>Student</code>可以调用<code>People</code>中的方法，因为<code>People</code>中有<code>this.name = name;</code>等语句，这样就将<code>name</code>和<code>age</code>属性创建到了<code>Student</code>中。</p><p>总结一句话就是<code>call()</code>可以让<strong>括号里的对象来继承括号外函数的属性</strong>。</p><p>至于<code>apply()</code>方法作用也和<code>call()</code>方法一样，可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">People.apply(<span class="keyword">this</span>, [name, age]);</span><br></pre></td></tr></table></figure></p><p>或者这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">People.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure></p><p>在这里<code>arguments</code>和<code>[name, age]</code>是等价的。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><p>从定义中也可以看出来，<code>call()</code>和<code>apply()</code>的不同点就是<strong>接收参数的方式不同</strong>。</p><ul><li><strong>apply()方法</strong>接收两个参数，一个是函数运行的作用域（<code>this</code>），另一个是参数数组。</li><li><strong>call()方法</strong>不一定接受两个参数，第一个参数也是函数运行的作用域（<code>this</code>），但是传递给函数的参数必须列举出来。</li></ul><p>在给对象参数的情况下,如果参数的形式是数组的时候,比如之前<code>apply()</code>方法示例里面传递了参数<code>arguments</code>,这个参数是数组类型,并且在调用<code>Person</code>的时候参数的列表是对应一致的(也就是<code>Person</code>和<code>Student</code>的参数列表前两位是一致的)就可以采用<code>apply()</code>方法。</p><p>但是如果<code>Person</code>的参数列表是这样的<code>(age,name)</code>，而Student的参数列表是<code>(name,age,grade)</code>，这样就可以用<code>call()</code>方法来实现了,也就是直接指定参数列表对应值的位置<code>Person.call(this,age,name)</code>。 </p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="apply-的其他用法"><a href="#apply-的其他用法" class="headerlink" title="apply()的其他用法"></a>apply()的其他用法</h3><p><code>apply</code>有一个巧妙的用处,就是可以<strong>将一个数组默认的转换为一个参数列表</strong>(<code>[param1,param2,param3]</code>转换为<code>param1,param2,param3</code>)，借助<code>apply</code>的这点特性，所以就有了以下高效率的方法：</p><h4 id="Math-max可以实现得到数组中最大的一项"><a href="#Math-max可以实现得到数组中最大的一项" class="headerlink" title="Math.max可以实现得到数组中最大的一项"></a>Math.max可以实现得到数组中最大的一项</h4><p>因为<code>Math.max</code>参数里面不支持<code>Math.max([param1,param2])</code>，也就是数组，但是它支持<code>Math.max(param1,param2,param3…)</code>，所以可以根据<code>apply</code>的那个特点来解决：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, array);</span><br><span class="line"><span class="built_in">console</span>.log(max);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>这样轻易的可以得到一个数组中最大的一项，<code>apply</code>会将一个数组装换为一个参数接一个参数的传递给方法，这块在调用的时候第一个参数给了一个<code>null</code>，这个是因为没有对象去调用这个方法，我们只需要用这个方法帮我运算，得到返回的结果就行，所以直接传递了一个<code>null</code>过去，当然，第一个参数使用<code>this</code>也是可以的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, array);</span><br><span class="line"><span class="built_in">console</span>.log(max);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>使用<code>this</code>就相当于用全局对象去调用<code>Math.max</code>，所以也是一样的。</p><h4 id="Math-min可以实现得到数组中最小的一项"><a href="#Math-min可以实现得到数组中最小的一项" class="headerlink" title="Math.min可以实现得到数组中最小的一项"></a>Math.min可以实现得到数组中最小的一项</h4><p>同样的<code>Math.min</code>和<code>Math.max</code>是一个思想：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, array);</span><br><span class="line"><span class="built_in">console</span>.log(min);<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>当然，<code>apply</code>的第一个参数可以用<code>null</code>也可以用<code>this</code>，这个是和<code>Math.max</code>一样的。</p><h4 id="Array-prototype-push可以实现两个数组合并"><a href="#Array-prototype-push可以实现两个数组合并" class="headerlink" title="Array.prototype.push可以实现两个数组合并"></a>Array.prototype.push可以实现两个数组合并</h4><p>同样的，<code>push</code>方法没有提供<code>push</code>一个数组，但是它提供了<code>push(param1,param,…paramN)</code>所以同样也可以通过<code>apply</code>来装换一下这个数组，即:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);<span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure></p><p>可以这样理解，<code>arr1</code>调用了<code>Array</code>的<code>push</code>方法，参数是通过<code>apply</code>将数组装换为参数列表的集合，其实，<code>arr1</code>也可以调用自己的<code>push</code>方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr1.push.apply(arr1, arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);<span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure></p><p>也就是只要有<code>push</code>方法，<code>arr1</code>就可以利用<code>apply</code>方法来调用该方法，以及使用<code>apply</code>方法将数组转换为一系列参数，所以也可以这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">[].push.apply(arr1, arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);<span class="comment">//[ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般在目标函数只需要n个参数列表，但是不接收一个数组的形式（<code>[param1[,param2[,…[,paramN]]]]</code>），我们就可以通过<code>apply</code>的方式来巧妙地解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天又碰到了JacvaScript中的&lt;code&gt;call()&lt;/code&gt;和&lt;code&gt;apply()&lt;/code&gt;方法，然后看看学学，敲了遍代码，才大概对这两个方法有些了解，这篇博客是对这两个方法的归纳整理。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;每个函数都包含两个非继承而来的方法：&lt;code&gt;call()&lt;/code&gt;方法和&lt;code&gt;apply()&lt;/code&gt;方法。&lt;br&gt;
    
    </summary>
    
      <category term="个人整理" scheme="http://chrischen0405.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/"/>
    
    
      <category term="JavaScript" scheme="http://chrischen0405.github.io/tags/JavaScript/"/>
    
      <category term="函数" scheme="http://chrischen0405.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="call" scheme="http://chrischen0405.github.io/tags/call/"/>
    
      <category term="apply" scheme="http://chrischen0405.github.io/tags/apply/"/>
    
      <category term="继承" scheme="http://chrischen0405.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
</feed>
